(*
Login
=======
The file holds functions and procedures that are related to the login screen
*)
{$IFNDEF CODEINSIGHT}
const
  _LOGIN_TEXT_YELLOW = 65535;
  _LOGIN_TEXT_WHITE = 16777215;
  _LOGIN_BOX_LOGIN = 0;
  _LOGIN_BOX_PASSWORD = 1;
{$ENDIF}

type
  TRSLoginScreen = record(TInterfaceBase)
    LoginBox, PasswordBox, ResponseBox, WorldBox, ExistingUserBox: TBox;
  end;

var
  LoginScreen: TRSLoginScreen;

{$IFNDEF CODEINSIGHT}
procedure TRSLoginScreen.__Setup();
begin
  with (Self) do
  begin
    SetName('Login screen');
    SetStatic(True);
    SetBounds(srl.DefaultClientBounds);

    LoginBox    := [260, 240, 545, 255];
    PasswordBox := [260, 257, 545, 272];
    ResponseBox := [210, 190, 545, 233];
    WorldBox    := [12, 464, 99, 496];
    ExistingUserBox := [390, 272, 529, 307];
  end;
end;

procedure TRSLoginScreen.Debug();
var
  BMP: TMufasaBitmap;
begin
  BMP := GetMufasaBitmap( BitmapFromClient(SRL.DefaultClientBounds) );
  BMP.DrawBoxes([self.WorldBox, self.ExistingUserBox], False, $0000FF);
  BMP.DrawBoxes([self.LoginBox, self.PasswordBox, self.ResponseBox], False, $00FF00);
  BMP.Debug();
  BMP.Free();
end;
{$ENDIF}

(*
TRSLoginScreen.isOpen
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLoginScreen.isOpen(const WaitTime: UInt32 = 0): Boolean;

Waits up to 'WaitTime' for login screen to open.

Example:

.. code-block:: pascal

    srl.Writeln(BoolToStr(LoginScreen.isOpen()));
*)
function TRSLoginScreen.isOpen(const WaitTime: UInt32 = 0): Boolean;
var
  p: TPoint;
  TimeOut: UInt64;
begin
  TimeOut := GetTickCount64() + WaitTime;
  Result := False;

  repeat
    if (srl.FindText(p, 'Click to switch', 'StatChars07', _LOGIN_TEXT_WHITE, 1, Self.WorldBox)) then
      Exit(True);

    Wait(Random(50, 150));
  until (GetTickCount64() >= TimeOut);
end;

(*
TRSLoginScreen.isLoginOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLoginScreen.isLoginOpen(): Boolean;

Waits up to 'WaitTime' for the screen to change to where you can enter login input.

Example:

.. code-block:: pascal

    srl.Writeln(BoolToStr(LoginScreen.isLoginOpen()));
*)
function TRSLoginScreen.isLoginOpen(const WaitTime: UInt32 = 0): Boolean;
var
  p: TPoint;
  TimeOut: UInt64;
begin
  TimeOut := GetTickCount64() + WaitTime;
  Result := False;

  repeat
    if (Self.isOpen()) and (srl.FindText(p, 'Login:', 'UpChars07_s', _LOGIN_TEXT_WHITE, 1, Self.GetBounds())) then
      Exit(True);

    Wait(Random(50, 150));
  until (GetTickCount64() >= TimeOut);
end;

(*
TRSLoginScreen.GetCursor
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLoginScreen.GetCursor(): Byte;

Returns what box the blinking cursor is in.

Example:

.. code-block:: pascal

    Writeln('The cursor is in box: ', LoginScreen.GetCursor());
*)
function TRSLoginScreen.GetCursor(): Byte;
var
  TimeOut: UInt64;
begin
  TimeOut := GetTickCount64() + Random(2500, 3500);

  repeat
    if (CountColor(_LOGIN_TEXT_YELLOW, Self.LoginBox) > 10) then
      Exit(_LOGIN_BOX_LOGIN);
    if (CountColor(_LOGIN_TEXT_YELLOW, Self.PasswordBox) > 10) then
      Exit(_LOGIN_BOX_PASSWORD);

    Wait(Random(50, 100));
  until (GetTickCount64() > TimeOut);
end;

(*
TRSLoginScreen.SetCursor
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSLoginScreen.SetCursor(const New: Integer);

Sets the blinking cursor to the 'New' box.
Use consts _LOGIN_BOX_LOGIN or LOGIN_BOX_PASSWORD.

Example:

.. code-block:: pascal

    LoginScreen.SetCursor(1);
*)
procedure TRSLoginScreen.SetCursor(const New: Integer);
begin
  if (Self.GetCursor() = New) then
    Exit();

  while (Self.GetCursor() <> New) do
  begin
    Keyboard.PressKey(VK_TAB);
    Wait(Random(350, 650));
  end;
end;

(*
TRSLoginScreen.EnterLoginInfo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLoginScreen.EnterLoginInfo(Login, Pass: String): Boolean;

Enters username and password into the login screen, Will also login to the game.

Example:

.. code-block:: pascal

    if (LoginScreen.EnterLoginInfo('user', 'pass')) then
      srl.Writeln('Success!');
*)
function TRSLoginScreen.EnterLoginInfo(Login, Pass: String): Boolean;
var
  Timeout: UInt64 := GetTickCount64() + Random(10000, 12000);
  Clear: array [0..1] of Boolean;
begin
  Result := True;

  if (not Self.isLoginOpen()) and (not Self.isOpen(Random(700, 1000))) then
    Exit(False);

  if (not Self.isLoginOpen()) then
  begin
    srl.Writeln('Opening login...');
    Mouse.Click(Self.ExistingUserBox, mouse_Left);

    if (not Self.isLoginOpen(Random(2000, 3000))) then
      Exit(False);
  end;

  Clear[_LOGIN_BOX_LOGIN]    := CountColor(_LOGIN_TEXT_WHITE, Self.LoginBox) <> 0;
  Clear[_LOGIN_BOX_PASSWORD] := CountColor(_LOGIN_TEXT_WHITE, Self.PasswordBox) <> 0;

  { Login }
  if (Self.GetCursor() <> _LOGIN_BOX_LOGIN) then
    Self.SetCursor(_LOGIN_BOX_LOGIN);

  if (Clear[_LOGIN_BOX_LOGIN]) then
    while (CountColor(_LOGIN_TEXT_WHITE, Self.LoginBox) > 5) and (Timeout > GetTickCount64()) do
    begin
      if (not Self.isLoginOpen) then
        Exit(False);

      Keyboard.PressKey(VK_BACK);
      Wait(Random(30, 120));
    end;

  Keyboard.Send(Login, VK_ENTER);

  { Password }
  if (Self.GetCursor() <> _LOGIN_BOX_PASSWORD) then
    Self.SetCursor(_LOGIN_BOX_PASSWORD);

  if (Clear[_LOGIN_BOX_PASSWORD]) then
    while (CountColor(_LOGIN_TEXT_WHITE, Self.PasswordBox) > 5) and (Timeout > GetTickCount64()) do
    begin
      if (not Self.isLoginOpen) then
        Exit(False);

      Keyboard.PressKey(VK_BACK);
      Wait(Random(30, 120));
    end;

  Keyboard.Send(Pass, VK_ENTER);
end;

(*
TRSLoginScreen.OpenWorldSwitcher
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSLoginScreen.OpenWorldSwitcher(): Boolean;

Opens the world switcher.

.. note::

    - by Olly
    - Last Updated: 30 December 2014 by Olly

Example:

.. code-block:: pascal

  LoginScreen.OpenWorldSwitcher();
*)
function TRSLoginScreen.OpenWorldSwitcher(): Boolean;
begin
  if (WorldSwitcher.isOpen()) then
    Exit(True);

  Result := Self.isOpen();
  if (not Result) then
    Exit(srl.Writeln('Cannot open world switcher, login screen isn''t open', False));

  Mouse.Click(Self.WorldBox, mouse_Left);
  Result := WorldSwitcher.isOpen(Random(4000, 6000));
end;

(*
TRSLoginScreen.GetResponse
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLoginScreen.GetResponse(): String;

Returns the login response (ie: Error connecting to server);

Example:

.. code-block:: pascal

  Writeln(LoginScreen.GetResponse);
*)
function TRSLoginScreen.GetResponse(): String;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: Integer;
  b: TBox;
begin
  if (FindColors(TPA, _LOGIN_TEXT_YELLOW, Self.ResponseBox)) then
  begin
    ATPA := ClusterTPAEx(TPA, Self.ResponseBox.Width, 1);
    SortATPAFromFirstPointY(ATPA, Point(Self.ResponseBox.X1, Self.ResponseBox.Y1));
    for i := 0 to High(ATPA) do
    begin
      b := GetTPABounds(ATPA[i]);
      Result += Trim(GetTextAtEx(b, 0, 3, 3, _LOGIN_TEXT_YELLOW, 0, 'UpChars07_s'));
    end;
  end;
end;

(*
TRSLoginScreen.WaitResponse
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLoginScreen.WaitResponse(): String;

Waits for a login response (see GetResponse) to appear up to 15 seconds,
if Lobby screen is detected will return 'lobby'.

Example:

.. code-block:: pascal

  LoginScreen.OpenWorldSwitcher();
*)
function TRSLoginScreen.WaitResponse(): String;
const
  VAILD_CONNECTING = 'Connecting to server...';
  VAILD_ENTER_INFO = 'Enter your username/email & password.';
var
  TimeOut: UInt64;
  Response: String;
begin
  Result := '';
  TimeOut := GetTickCount64() + Random(10000, 12000);

  while (TimeOut > GetTickCount64()) do
  begin
    Response := Self.GetResponse();
    if (Response = VAILD_CONNECTING) then // We will wait forever while 'Connecting to server...' is visible
      TimeOut := GetTickCount64() + Random(10000, 12000);

    if (Self.isOpen()) and (Response <> '') then
      if (Response <> VAILD_CONNECTING) and (Response <> VAILD_ENTER_INFO) then
      begin
        Wait(250);

        if (Self.GetResponse() = Response) then
          Exit(Response);
      end;

    if (Lobby.isOpen()) then
      Exit('lobby');

    Wait(Random(300, 600));
  end;

  srl.Writeln('LoginScreen.WaitResponse: No response found - Timed out');
end;

function TRSLoginScreen.GetCurrentWorld(): Integer;
var
  b: TBox;
begin
  with Self.WorldBox do
    b := Box(X1, Y1, X2, Y2 - (Height div 2)); { World info is only in top half }

  Result := StrToIntDef(ExtractFromStr(GetTextAtEx(b, 0, 3, 3, $FFFFFF, 0, 'UpChars07_s'), Numbers), -1);
end;


begin
  LoginScreen.__Setup();
end;
