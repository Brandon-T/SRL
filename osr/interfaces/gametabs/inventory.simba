(*
Inventory
=======
The inventory file holds functions and procedures that are related 
to the runescape inventory
*)

(*
type TRSInventory
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape inventory gametab.
*)
type 
  TRSInventory = record(TInterfaceBase)
    FSlots: TBoxArray;
    LowSlot, HighSlot: Byte;
    ShiftDrop: Boolean;
  end;

{==| Table of Contents |=======================
 procedure TRSInventory.__setup();
 function TRSInventory.Open(): Boolean;
 function TRSInventory.IsOpen(): Boolean;
 function TRSInventory.PointToSlot(pt:TPoint): Int32;
 function TRSInventory.IsFull(): Boolean;
 function TRSInventory.IsSlotValid(idx: Int32): Boolean;
 function TRSInventory.GetSlotBox(idx:Int32): TBox;
 function TRSInventory.IsSlotUsed(idx:Int32): Boolean;
 function TRSInventory.GetUsedSlots(): TIntegerArray;
 procedure TRSInventory.DropItems(Slots:TIntegerArray = DROP_PATTERN_REGULAR);
 procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; dropPattern:TIntegerArray = DROP_PATTERN_REGULAR);
 function TRSInventory.FindItem(Mask: TMask; Tolerance:Int32 = 30; ContourTolerance:Int32 = 30; MaxToFind:Byte = 28): TIntegerArray;
 function TRSInventory.FindItem(DTM: Integer; MaxToFind:Byte = 28): TIntegerArray; overload;
 function TRSInventory.FindItem(BMP: Integer; Tolerance:Int32; MaxToFind:Byte = 28): TIntegerArray; overload;
 function TRSInventory.Count(): Byte;
 function TRSInventory.GetActiveSlot(): Int8;
 function TRSInventory.ActivateSlot(Slot: Int32): Boolean;
}

(*
var inventory
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape inventory gametab.
*)
var 
  Inventory: TRSInventory;

const
    //Column wise (Z-style) and "reversed" column wise (S-style)
    DROP_PATTERN_REGULAR   = [0..27];
    DROP_PATTERN_REGULAR_R = [3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12, 19,18,17,16, 23,22,21,20, 27,26,25,24];

    //Column wise (zigzag-style) and "reversed" version
    DROP_PATTERN_SNAKE   = [0,1,2,3, 7,6,5,4, 8,9,10,11, 15,14,13,12, 16,17,18,19, 23,22,21,20, 24,25,26,27];
    DROP_PATTERN_SNAKE_R = [3,2,1,0, 4,5,6,7, 11,10,9,8, 12,13,14,15, 19,18,17,16, 20,21,22,23, 27,26,25,24];

    //by row (and "reversed")
    DROP_PATTERN_TOPDOWN   = [0,4,8,12,16,20,24,  1,5,9,13,17,21,25,  2,6,10,14,18,22,26, 3,7,11,15,19,23,27];
    DROP_PATTERN_TOPDOWN_R = [3,7,11,15,19,23,27, 2,6,10,14,18,22,26, 1,5,9,13,17,21,25,  0,4,8,12,16,20,24];


{$IFNDEF CODEINSIGHT}
procedure TRSInventory.__Setup();
var 
  i:Int32;
  SlotBounds:TBox = [559,211,726,462];
begin
  with Self do
  begin
    FName := 'Inventory';
    FStatic := True;
  
    FBounds := [548,206,735,464];
    FSlots := SlotBounds.Partition(7, 4, -2);
    for i:=0 to High(FSlots) do
    begin
      FSlots[i].x1 += 3;
      FSlots[i].x2 -= 3;
    end;
   
    LowSlot  := 0;
    HighSlot := 27;
  end;
end;

procedure TRSInventory.Debug();
var
  BMP:TMufasaBitmap;
begin
  BMP := GetMufasaBitmap( BitmapFromClient(SRL.DefaultClientBounds) );
  BMP.DrawBoxes(Self.FSlots, False, $0000FF);
  BMP.DrawBox(FBounds, False, $00FF00);
  BMP.Debug();
  BMP.Free();
end;
{$ENDIF}


//given a pattern an a upper limit of errors, it will swap around some values and return a "errorized" drop-pattern
function TRSInventory.ErrorPattern(Pattern: TIntegerArray=DROP_PATTERN_REGULAR; ErrorChance:Int32=5): TIntegerArray;
var i,j,h: Int32;
begin
  Result := Copy(Pattern);
  h := High(Pattern);
  for i:=1 to H do
  begin
    if Random(100) < ErrorChance then
    begin
      j := RandomRange(1,h);
      Swap(Result[j], Result[j-1]);
    end;
  end;
end;

(*
Inventory.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Open(): Boolean;

Opens the interface
*)
function TRSInventory.Open(): Boolean;
begin
  Result := Gametabs.Open(tabInventory);
end;


(*
Inventory.IsOpen
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSInventory.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabInventory, maxWait);
end;


(*
Inventory.IsSlotValid
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsSlotValid(idx: Int32): Boolean;

Returns true if the given slot is within a valid range.

.. note:: by slacky
*)
function TRSInventory.IsSlotValid(idx: Int32): Boolean;
begin
  Result := InRange(idx, Low(Self.FSlots), High(Self.FSlots));
end;

(*
Inventory.PointToSlot
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.PointToSlot(pt:TPoint): Int32;

Returns the slot-index under the given TPoint. 
If it's not over a slot then -1 is returned

.. note:: by slacky
*)
function TRSInventory.PointToSlot(pt:TPoint): Int32;
begin
  if not(PointInBox(Pt, Self.FBounds)) then
    Exit(-1);
  
  for Result:=0 to High(self.FSlots) do
    if PointInBox(pt, Self.FSlots[Result]) then
      Exit;
  Result := -1;
end;

(*
Inventory.MouseSlot
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSInventory.MouseSlot(idx:Int32; btn: Integer = mouse_Move);

Moves the moise over the given slot-index.

.. note:: by slacky
*)
procedure TRSInventory.MouseSlot(idx:Int32; btn:Integer=mouse_Move);
begin
  if not(self.Open()) then
    Exit();

  if self.IsSlotValid(idx) then
  begin
    Mouse.Move(self.FSlots[idx])
    if (btn <> mouse_Move) then
      Mouse.Click(btn);
  end else
    {notify index out of range};
end;

(*
Inventory.IsFull
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsFull(): Boolean;

Returns True if the inventory can't hold anymore items

.. note:: by slacky
*)
function TRSInventory.IsFull(): Boolean;
var
  b:TBox;
begin
  if not(self.Open()) then
    Exit();

  for b in self.FSlots do
    if (CountColor($10000, b.x1,b.y1,b.x2,b.y2) = 0) then
      Exit(False);

  Result := True;
end;

(*
Inventory.GetSlotBox
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetSlotBox(idx:Int32): TBox;

Returns the bounding box covering the given slot-index.

.. note:: by slacky
*)
function TRSInventory.GetSlotBox(idx:Int32): TBox;
begin
  if self.IsSlotValid(idx) then
    Result := Self.FSlots[idx]
  else
    {notify index out of range};
end;

(*
Inventory.IsSlotUsed
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsSlotUsed(idx:Int32): Boolean;

Returns true if the given slot is occupied.

.. note:: by slacky
*)
function TRSInventory.IsSlotUsed(idx:Int32; DoOpen:Boolean=True): Boolean;
var
  b: TBox;
begin
  if (DoOpen) and not(self.Open()) then
    Exit(False);

  b := self.FSlots[idx];
  Result := CountColor($10000, b.x1, b.y1, b.x2, b.y2) > 0;
  if (not Result) then
    Result := CountColor(1777700, b.x1, b.y1, b.x2, b.y2) > 0;
end;

(*
Inventory.GetUsedSlots
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetUsedSlots(idx:Int32): TIntegerArray;

Returns all the occupied slot-indices.

.. note:: by slacky
*)
function TRSInventory.GetUsedSlots(): TIntegerArray;
var
  i,j: Int32;
begin
  if not(self.Open()) then
    Exit();

  SetLength(Result, 28);
  for i:=0 to High(self.FSlots) do
    if Self.IsSlotUsed(i, False) then
      Result[inc(j)-1] := i;
  SetLength(Result, j);
end;

(*
Inventory.Count
~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Count: Int32;

Returns the number of used slots
*)
function TRSInventory.Count: Int32; overload
begin
  Result := Length(Self.GetUsedSlots());
end;

(*
Inventory.DropItems
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.DropItems(Slots:TIntegerArray = DROP_PATTERN_REGULAR);

Drops the given items. It's order-sensitive which means unless you want it to 
jump randomly all over the inventory dropping items, you give it a ordered drop-pattern.

.. note:: by slacky

Examples:
.. code-block:: pascal

    // drops all items in a "snake order" / "Z"-order
    Inventory.DropItems(DROP_PATTERN_SNAKE);

.. code-block:: pascal

    Inventory.DropItems([0..3]); // drops the four first items
*)
procedure TRSInventory.DropItems(Slots:TIntegerArray = DROP_PATTERN_REGULAR; UpText:TStringArray=[]);
var
  idx,swt: Int32;
label
  START;
begin
  if not(self.Open()) then
    Exit();

  START:

  if shiftDrop then
  begin
    Keyboard.KeyDown(VK_SHIFT);
    WaitEx(110,10);
  end;

  for idx in Slots do
    if self.IsSlotValid(idx) and self.IsSlotUsed(idx, False) then
    begin
      Mouse.Move(self.FSlots[idx]);

      if (UpText <> []) then
      begin
        swt := GetTimeRunning() + 50;
        Wait(0,250,wdLeft);                //for uptext to refresh, and antiban
        Wait(Max(1,swt-GetTimeRunning())); //we need min 50ms tho
        if not mainscreen.IsUpText(UpText) then
          Continue;
      end;

      if (not ShiftDrop) then
        ChooseOption.Select(['Drop'])
      else
      begin
        Mouse.Click(mouse_Left);
        if (self.GetActiveSlot() <> -1) then
        begin
          Self.MouseSlot(self.GetActiveSlot(), mouse_Left);
          goto START;
        end;
      end;
      Wait(0,250,wdLeft);
    end;

  if ShiftDrop then
  begin
    WaitEx(120,10);
    Keyboard.KeyUp(VK_SHIFT);
  end;
end;


(*
Inventory.DropItemsExcept
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; Slots:TIntegerArray = DROP_PATTERN_REGULAR);

Drops all the given items ``Slots`` except for the items in ``IgnoreSolots``

.. note:: by slacky
*)
procedure TRSInventory.DropItemsExcept(IgnoreSlots:TIntegerArray; Slots:TIntegerArray = DROP_PATTERN_REGULAR);
var
  i,j: Int32;
  ptrn: TIntegerArray;
begin
  SetLength(ptrn, 28);
  for i:=0 to High(Slots) do
    if not(InIntArray(ignoreSlots,Slots[i])) then
      ptrn[inc(j)-1] := Slots[i];

  SetLength(ptrn, j);
  Self.DropItems(ptrn);
end;

(*
Inventory.FindItem
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.FindItem(Mask: TMask; Tolerance:Int32 = 30; ContourTolerance:Int32 = 30; MaxToFind:Byte = 28): TIntegerArray;
  function TRSInventory.FindItem(DTM: Integer; MaxToFind:Byte = 28): TIntegerArray; overload;
  function TRSInventory.FindItem(BMP: Integer; Tolerance:Int32; MaxToFind:Byte): TIntegerArray; overload;

Find the slots of the given item defined by a `TMask`, `DTM`, or `BMP`.

_Note: Last parameter is not defaulted in the last overload `FindItem(BMP..)` for technical reasons._

Example:
.. code-block:: pascal

    itemArr := Inventory.FindItem(myMask);
    if itemArr = [] then
      WriteLn('Not found');
*)
function TRSInventory.FindItem(Mask: TMask; Tolerance:Int32 = 30; ContourTolerance:Int32 = 30; MaxToFind:Byte = 28): TIntegerArray;
var
  i,j: Int32;
  p: TPoint;
begin
  if not(self.Open()) then Exit();

  SetLength(Result, MaxToFind);
  for i := Self.LowSlot to Self.HighSlot do
    if (FindMaskTolerance(Mask, p.x, p.y, Self.GetSlotBox(i), Tolerance, ContourTolerance)) then
    begin
      Result[inc(j)-1] := i;
      if (j = MaxToFind) then
        Break;
    end;
  SetLength(Result, j);
end;

function TRSInventory.FindItem(DTM: Integer; MaxToFind:Byte = 28): TIntegerArray; overload;
var
  i,j: Int32;
  pt: TPoint;
begin
  if not(self.Open()) then Exit();

  SetLength(Result, MaxToFind);
  for i:=Self.LowSlot to Self.HighSlot do
    if FindDTM(DTM, pt.x, pt.y, Self.GetSlotBox(i)) then
    begin
      Result[inc(j)-1] := i;
      if (j = MaxToFind) then
        Break;
    end;
  SetLength(Result, j);
end;

function TRSInventory.FindItem(BMP: Integer; Tolerance:Int32; MaxToFind:Byte): TIntegerArray; overload;
var
  i,j: Int32;
  pt: TPoint;
begin
  if not(self.Open()) then Exit();

  SetLength(Result, MaxToFind);
  for i := Self.LowSlot to Self.HighSlot do
    if (FindBitmapToleranceIn(BMP, pt.x, pt.y, Self.GetSlotBox(i), Tolerance)) then
    begin
      Result[inc(j)-1] := i;
      if (j = MaxToFind) then
        Break;
    end;
  SetLength(Result, j);
end;

(*
Inventory.Count
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Count(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Int32; overload;
  function TRSInventory.Count(DTM: Integer): Int32; overload;
  function TRSInventory.Count(BMP: Integer; Tolerance:Int32): Int32; overload;

Counts the number of slots containing this item
*)
function TRSInventory.Count(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Int32; overload;
begin
  Result := Length(Self.FindItem(Mask,Tolerance,ContourTolerance,28));
end;

function TRSInventory.Count(DTM: Integer): Int32; overload;
begin
  Result := Length(Self.FindItem(DTM));
end;

function TRSInventory.Count(BMP: Integer; Tolerance:Int32): Int32; overload;
begin
  Result := Length(Self.FindItem(BMP,Tolerance,28));
end;

(*
Inventory.Contains
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Contains(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Boolean;
  function TRSInventory.Contains(DTM: Integer): Boolean; overload;
  function TRSInventory.Contains(BMP: Integer; Tolerance:Int32): Boolean; overload;

Returns true if the inventory contains the given item
*)
function TRSInventory.Contains(Mask: TMask; Tolerance, ContourTolerance:Int32=30): Boolean;
begin
  Result := Length(Self.FindItem(Mask,Tolerance,ContourTolerance,1)) <> 0;
end;

function TRSInventory.Contains(DTM: Integer): Boolean; overload;
begin
  Result := Length(Self.FindItem(DTM,1)) <> 0;
end;

function TRSInventory.Contains(BMP: Integer; Tolerance:Int32): Boolean; overload;
begin
  Result := Length(Self.FindItem(BMP,Tolerance,1)) <> 0;
end;


(*
Inventory.GetActiveSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetActiveSlot(): Int8;

Returns the index to the current active slot, returns `-1` if none.
*)
function TRSInventory.GetActiveSlot(): Int8;
var
  i: Integer;
  b: TBox;
begin
  if not(self.Open()) then Exit();

  Result := -1;
  for i := 0 to High(Self.FSlots) do
  begin
    b := self.FSlots[i];
    if (CountColor(16777215, b.X1, b.Y1 + 15, b.X2, b.Y2) > 10) then
      Exit(i);
  end;
end;

(*
Inventory.ActivateSlot
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.ActivateSlot(Slot: Int32): Boolean;

Activates (Presses) the given slot, however if `Slot` is `-1` then it will disable the current active slot.
*)
function TRSInventory.ActivateSlot(Slot: Int32): Boolean;
var
  i: Int32;
  procedure Deactivate(Slot: Int32);
  begin
    if (Slot > -1) then
    begin
      Inventory.MouseSlot(Slot, mouse_Left);
      Wait(Random(200, 300));
    end;
  end;
begin
  Result := True;

  // Deactivate whatever is activated
  if (Slot = -1) and (Self.GetActiveSlot() <> -1) then
  begin
    Deactivate(Self.GetActiveSlot());
    Exit;
  end;

  i := Self.GetActiveSlot();
  if (Slot = i) then
    Exit;

  if (i > -1) then
    DeActivate(i);

  Inventory.MouseSlot(Slot);
  if Mainscreen.IsUptext('Use ') then
  begin
    Mouse.Click(mouse_Left);
    Result := True;
  end else
    Result := ChooseOption.Select(['Use']);
end;

(*
Inventory.Use
~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Use(Slot: Int32): Boolean;

RS correct alias for Inventory.ActivateSlot.
*)
function TRSInventory.Use(Slot: Int32): Boolean;
begin
  Result := ActivateSlot(Slot);
end;


begin
  Inventory.__Setup();
end;
