(*
Spells
=======
The file holds functions and procedures that are related to the spells gametab
*)

type 
  TRSSpells = record(TInterfaceBase)
    FSlots: TBoxArray;
  end;

  
{==| Table of Contents |=======================
 procedure TRSSpells.__setup();
 function TRSSpells.Open(): Boolean;
 function TRSSpells.IsOpen(): Boolean;
 function TRSSpells.GetSpellBounds(spell:ESpellCast): TBox;
 function TRSSpells.MouseOver(spell:ESpellCast): Int32;
}

(*
var Spells
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape magic/spells gametab.
*)
var 
  Spells: TRSSpells;

type
  ESpellCast = (
    CAST_LUMBRIDGE_HOME_TELEPORT,
    CAST_WIND_STRIKE,
    CAST_CONFUSE,
    CAST_ENCHANT_CROSSBOW_BOLT,
    CAST_WATER_STRIKE,
    CAST_LVL1_ENCHANT,
    CAST_EARTH_STRIKE,

    CAST_WEAKEN,
    CAST_FIRE_STRIKE,
    CAST_BONES_TO_BANANAS,
    CAST_WIND_BOLT,
    CAST_CURSE,
    CAST_BIND,
    CAST_LOW_LEVEL_ALCHEMY,

    CAST_WATER_BOLT,
    CAST_VARROCK_TELEPORT,
    CAST_LVL2_ENCHANT,
    CAST_EARTH_BOLT,
    CAST_LUMBRIDGE_TELEPORT,
    CAST_TELEKINETIC_GRAB,
    CAST_FIRE_BOLT,

    CAST_FALADOR_TELEPORT,
    CAST_CRUMBLE_UNDEAD,
    CAST_TELEPORT_TO_HOUSE,
    CAST_WIND_BLAST,
    CAST_SUPERHEAT_ITEM,
    CAST_CAMELOT_TELEPORT,
    CAST_WATER_BLAST,

    CAST_LVL3_ENCHANT,
    CAST_IBAN_BLAST,
    CAST_SNARE,
    CAST_MAGIC_DART,
    CAST_ARDOUGNE_TELEPORT,
    CAST_EARTH_BLAST,
    CAST_HIGH_LEVEL_ALCHEMY,

    CAST_CHARGE_WATER_ORB,
    CAST_LVL4_ENCHANT,
    CAST_WATCHTOWER_TELEPORT,
    CAST_FIRE_BLAST,
    CAST_CHARGE_EARTH_ORB,
    CAST_BONES_TO_PEACHES,
    CAST_SARADOMIN_STRIKE,

    CAST_CLAWS_OF_GUTHIX,
    CAST_FLAMES_OF_ZAMORAK,
    CAST_TROLLHEIM_TELEPORT,
    CAST_WIND_WAVE,
    CAST_CHARGE_FIRE_ORB,
    CAST_TELEPORT_TO_APE_ATOLL,
    CAST_WATER_WAVE,

    CAST_CHARGE_AIR_ORB,
    CAST_VULNERABILITY,
    CAST_LVL5_ENCHANT,
    CAST_TELEPORT_TO_KOUREND,
    CAST_EARTH_WAVE,
    CAST_ENFEEBLE,
    CAST_TELEOTHER_LUMBRIDGE,

    CAST_FIRE_WAVE,
    CAST_ENTANGLE,
    CAST_STUN,
    CAST_CHARGE,
    CAST_TELEOTHER_FALADOR,
    CAST_TELE_BLOCK,
    CAST_TELEPORT_TO_BOUNTY_TARGET,

    CAST_LVL6_ENCHANT,
    CAST_TELEOTHER_CAMELOT
  );


{$IFNDEF CODEINSIGHT}
procedure TRSSpells.__Setup();
var 
  SlotBounds:TBox = [559,220,726,459];
begin
  with Self do
  begin
    FName := 'Spells';
    FStatic := True;
    FBounds := [548,206,735,464];
    FSlots := SlotBounds.Partition(10,7);
  end;
end;

procedure TRSSpells.__Debug();
var
  BMP:TMufasaBitmap;
begin
  BMP := GetMufasaBitmap( BitmapFromClient(SRL.DefaultClientBounds) );
  BMP.DrawBoxes(Self.FSlots, False, $0000FF);
  BMP.DrawBox(FBounds, False, $00FF00);
  BMP.Debug();
  BMP.Free();
end;
{$ENDIF}


(*
Spells.Open
~~~~~~~~~~~
.. code-block:: pascal

  function TRSSpells.Open(): Boolean;

Opens the interface
*)
function TRSSpells.Open(): Boolean;
begin
  Result := Gametabs.Open(tabMagic);
end;


(*
Spells.IsOpen
~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSSpells.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSSpells.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabMagic, maxWait);
end;


(*
Spells.GetSpellBound
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSSpells.GetSpellBound(spell: ESpellCast): TBox;

Returns the bounding box covering the given spell.

.. note:: by slacky
*)
function TRSSpells.GetSpellBound(spell: ESpellCast): TBox;
begin
  Result := Self.FSlots[spell]
end;


(*
Spells.PointToSlot
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSSpells.PointToSlot(pt: TPoint): Int32;

Returns the index of the slot under `pt`
*)
function TRSSpells.PointToSlot(pt: TPoint): Int32;
begin
  for Result:=0 to High(Self.FSlots) do
    if Self.FSlots[Result].Contains(pt) then
      Exit(Result);
  Result := -1;
end;


(*
Spells.MouseOver
~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSSpells.MouseOver(spell:ESpellCast): Boolean;

Moves the mouse over the given spell.

.. note:: by slacky
*)
function TRSSpells.MouseOver(spell:ESpellCast): Boolean;
begin
  if not (Self.Open()) then Exit();
  
  Result := True;
  Mouse.Move(Self.FSlots[spell]);
end;

(*
Spells.Selected
~~~~~~~~~~~~~~~
.. code-block:: pascal
  function TRSSpells.Selected(Spell: ESpellCast): Boolean;
Returns True if the spell is currently selected
.. note:: by Olly
*)
function TRSSpells.Selected(Spell: ESpellCast): Boolean;
begin
  if not (Self.Open()) then Exit();

  Result := CountColor(16777215, Self.FSlots[spell]) > 10;
end;

(*
Spells.Cast
~~~~~~~~~~~
.. code-block:: pascal
  function TRSSpells.Cast(Spell: ESpellCast): Boolean
Casts the spell
.. note:: by Olly
*)
function TRSSpells.Cast(Spell: ESpellCast): Boolean;
begin
  if Self.Selected(Spell) then
    Exit(True);

  Result := Self.MouseOver(Spell);
  if Result then
    Mouse.Click(mouse_Left);
end;

(*
Spells.CanActivate
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal
  function TRSSpells.CanActivate(Spell: ESpellCast): Boolean;
Returns True if you can use the spell..
.. note:: by slacky
*)
function TRSSpells.CanActivate(Spell: ESpellCast): Boolean;
var
  bmp: TMufasaBitmap;
begin
  if not(self.Open()) then Exit(False);
  bmp.FromClient(self.GetSpellBound(spell));
  Result := bmp.PeakBrightness() > 35;
  bmp.Free();
end;

begin
  Spells.__setup();
end;










