(*
Options
=======
The options file holds functions and procedures that are used for configuring runescape.
*)

(*
type TRSOptions
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape options interface.
*)   
type 
  TRSOptions = record(TInterfaceBase)
    FTabs: TBoxArray;
  end;

{==| Table of Contents |=======================
 procedure TRSOptions.__setup();
 function TRSOptions.Open(): Boolean;
 function TRSOptions.IsOpen(): Boolean;
 function TRSOptions.GetCurrentTab(): EOptionsTab;
 function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
 function TRSOptions.GetBrightness(): Int32;
 function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleOrbs(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRoofRemoval(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRemainingXP(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
}

(*
var Options
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape options interface.
*)
var 
  Options: TRSOptions;


(*
type EOptionsTab
~~~~~~~~~~~~~~~
A type that covers the internal tabs in TRSOptions: ``EOptionsTab = (optDisplay, optAudio, optChat, optControls)``
*)
type
  EOptionsTab = (optDisplay, optAudio, optChat, optControls);

  
{$IFNDEF CODEINSIGHT}
procedure TRSOptions.__setup();
begin
  self.FBounds := [550,206,733,464];
  
  with Self do
  begin
    FName := 'Options';
    FStatic := True;
  end;

  //the four tabs (Display, Audio, Chat, Controls)
  SetLength(Self.FTabs, 4);
  Self.FTabs[0] := [553,206,592,245];
  Self.FTabs[1] := [599,206,638,245];
  Self.FTabs[2] := [645,206,684,245];
  Self.FTabs[3] := [691,206,730,245];
end;
{$ENDIF}

(*
Options.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.Open(): Boolean;

Opens the interface
*)
function TRSOptions.Open(): Boolean;
begin
  Result := Gametabs.Open(tabOptions);
end;

(*
Options.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSOptions.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabOptions, maxWait);
end;


//helper: Changes tab, and toggles the given button returns True if it didn't fail
function TRSOptions.__toggleButton(button:TBox; tab:EOptionsTab; enable:Boolean; tryTime:Int32): Boolean;
var enabled:Boolean;
begin
  if not(self.SetCurrentTab(tab)) then
    Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;


(*
Options.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.GetCurrentTab(): EOptionsTab;

Returns which tab is currently active.
*)
function TRSOptions.GetCurrentTab(): EOptionsTab;
var i:Int32;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(FTabs) do
    if GtButton(FTabs[i]).IsEnabled() then
      Exit(EOptionsTab(i));
end;

(*
Options.SetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.SetCurrentTab(Tab: EOptionsTab; tryTime:Int32=2000): Boolean;

Sets the current tab to the given ``Tab``
*)
function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  wasOpen:Boolean;
begin
  wasOpen := self.IsOpen();
  if not(self.Open()) then 
    Exit();
  if not(wasOpen) then
    Wait(20,300);

  if Self.GetCurrentTab() = tab then Exit(True);

  Mouse.Click(Self.FTabs[Ord(tab)], mouse_left);
  t := GetTickCount64()+tryTime;
  repeat
    if GtButton(FTabs[Ord(tab)]).IsEnabled() then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
Options.GetBrightness
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.GetBrightness(): Int32;

Returns the mainscreen brightness
*)
function TRSOptions.GetBrightness(): Int32;
var
  x,y:Int32;
  range:TBox = [609,298,718,316];
begin
  if not(self.SetCurrentTab(optDisplay)) then
    Exit(-1);
  if not(FindColorTolerance(x,y, 9584920, range, 35)) then
    Exit(-1);
  Result := Round((x - range.x1)/(range.x2-range.x1+1)*3);
end;


(*
Options.SetBrightness
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;

Sets the mainscreen brightness
*)
function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  spacing:Int32=31;
  range:TBox = [609,298,718,316];
begin
  if not(self.SetCurrentTab(optDisplay)) or not(InRange(level, 0,3)) then
    Exit(False);

  if (self.GetBrightness() = level) then
    Exit(True);

  with range do
    Mouse.Click(TBox([x1+spacing*level,y1,x1+spacing*level+12,y2]), mouse_left);

  t := GetTickCount64()+tryTime;
  repeat
    if self.GetBrightness() = level then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
Options.GetZoom
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.GetZoom(): Int32;

Returns the mainscreen zoom
*)
function TRSOptions.GetZoom(): Int32;
var
  TPA:TPointArray;
  p: TPoint;
  range:TBox = [610,268,705,278];
begin
  if not(self.SetCurrentTab(optDisplay)) then
    Exit(-1);
  if not(FindColorsTolerance(TPA, 2200868, range, 35)) then
    Exit(-1);
  p := MiddleTPA(TPA);
  Result := Round((p.x - range.x1)*100/93);
end;

(*
Options.SetZoom
~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.SetZoom(APosition: Byte): Boolean;

Sets the zoom of the mainscreen. 0 = Zoomed out, 100 = Zoomed in.
*)
function TRSOptions.SetZoom(APosition: Byte): Boolean;
var
  r: Integer;
begin
  if (not Self.Open()) then
    Exit(False);

  // Disabled mouse wheel
  if (GetColor(573, 272) = 200) then
    Mouse.Click(Point(573, 272), 8, mouse_Left);

  while (Self.IsOpen()) and (not InRange(GetZoom(), APosition-2, APosition+2)) do
  begin
    r := Abs(GetZoom() - APosition);
    if (r < Random(12, 15)) then
      r := Random(1, 2)
    else
      r := Random(3, 6);

    if (GetZoom() < APosition) then
      Mouse.Scroll(Mainscreen.GetBounds(), r, False)
    else
      Mouse.Scroll(Mainscreen.GetBounds(), r, True);

    Wait(Random(10, 100));
  end;
  if APosition in [0,100] then //can't have it +/-2 for these two
    Mouse.Scroll(Mainscreen.GetBounds(), Random(3,4), APosition = 0);
  Result := True;
end;

(*
Options.ToggleAcceptAid
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [555,425,590,464];
begin
  if not self.Open() then Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;

(*
Options.ToggleRun
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [600,425,635,464];
begin
  if not self.Open() then Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;


(*
Options.ToggleChatEffects
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([568,268,602,305], optChat, enable, tryTime);
end;

(*
Options.ToggleSplitPrivChat
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([625,268,658,305], optChat, enable, tryTime);
end;


(*
Options.ToggleProfanityFilter
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([568,322,603,358], optChat, enable, tryTime);
end;

(*
Options.ToggleTimeoutNotice
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Login/Logout notification timeout" to the given state.
*)
function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([680,322,716,358], optChat, enable, tryTime);
end;

(*
Options.ToggleShiftDrop
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleShiftDrop(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Shift Drop" to the given state.
*)
function TRSOptions.ToggleShiftDrop(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([624,299,659,334], optControls, enable, tryTime);
end;


begin
  Options.__setup();
end;
