(*
MakeScreen
==============
This file stores all methods that are used for simpler interfaces like SmithingScreen.

.. code-block:: pascal

    Writeln(SmithingScreen.IsOpen());
*)
type
  TRSMakeScreen = record (TInterfaceBase)
    FTitleBounds, FItemBounds: TBox;
    FBoxes, FItemBoxes: TBoxArray;
    CloseButton: TBox;

    // styles
    Columns, Rows: Int32;
    Padding: TBox;
    FontName: String;
    FontColors: TIntArray;
  end;


{$IFNDEF CodeInsight}
procedure TRSMakeScreen.__Setup();
begin
  with Self do
  begin
    SetBounds(Mainscreen.GetBounds);
    SetName('MakeScreen');
    SetStatic(True);
  end;
end;
{$ENDIF}


function TRSMakeScreen.IsOpen(maxWaitTime: Int32 = -1): Boolean;
var
  TPA0,TPA1: TPointArray;
  t: TCountDown;
begin
  if Self.FItemBounds.Width  < 100 then Exit(False);
  if Self.FTitleBounds.Width < 100 then Exit(False);

  if maxWaitTime < 0 then
    maxWaitTime := Random(3000,4000);

  t.Init(maxWaitTime);
  repeat
    srl.FindColors(TPA0, CTS2(3424329,10), Self.FItemBounds);
    srl.FindColors(TPA1, CTS1(2070783,1),  Self.FTitleBounds);
    Result := (Length(TPA0) > 15000) and (Length(TPA0) > 40);
  until t.IsFinished() or (Result);
end;


function TRSMakeScreen.IsClosed(maxWaitTime: Int32 = -1): Boolean;
var
  TPA0,TPA1: TPointArray;
  t:TCountDown;
begin
  if Self.FItemBounds.Width  < 100 then Exit(True);
  if Self.FTitleBounds.Width < 100 then Exit(True);

  if maxWaitTime < 0 then
    maxWaitTime := Random(1000,1600);

  t.Init(maxWaitTime);
  repeat
    srl.FindColors(TPA0, CTS2(3424329,10), Self.FItemBounds);
    srl.FindColors(TPA1, CTS1(2070783,1),  Self.FTitleBounds);
    Result := (Length(TPA0) < 15000) and (Length(TPA0) < 40);
  until t.IsFinished() or (Result);
end;


function TRSMakeScreen.Prepare(): Boolean;
var
  TPA: TPointArray;
  ATPA,ItemATPA: T2DPointArray;
  i: Int32;
  B: TBox;
begin
  srl.FindColors(TPA, CTS2(3424329,10), Self.FBounds);
  ATPA := TPA.Cluster(1,3);
  SortATPAFromSize(ATPA, 0, False);

  if (Length(ATPA) >= 2) then
  begin
    Self.FTitleBounds := ATPA[1].Bounds();
    if Self.FTitleBounds.Width < 300 then Exit(False);
    Self.FItemBounds  := ATPA[0].Bounds();

    Self.FBounds := Self.FItemBounds.Combine(Self.FTitleBounds);
    Self.FBounds.Expand(6);

    with Self.FBounds do
      Self.CloseButton := Box(X2-27, Y1+7, X2-7, Y1+27);

    B := [
      Self.FItemBounds.X1 + Padding.X1,
      Self.FItemBounds.Y1 + Padding.Y1,
      Self.FItemBounds.X2 + Padding.X2,
      Self.FItemBounds.Y2 + Padding.Y2
    ];
    Self.FBoxes := B.Partition(Rows, Columns);

    SetLength(Self.FItemBoxes, Length(Self.FBoxes));
    for i:=0 to High(Self.FBoxes) do
    begin
      srl.FindColors(TPA, CTS2(3424329,10), Self.FBoxes[i]);
      TPA := TPA.Invert();
      if Length(TPA) > 0 then
      begin
        ItemATPA := TPA.Cluster(1);
        SortATPAFromSize(ItemATPA, 0, False);
        Self.FItemBoxes[i] := ItemATPA[0].Bounds();
        Self.FItemBoxes[i].LimitTo(Self.FBoxes[i]);
      end;
    end;

    Result := True;
  end;
end;


procedure TRSMakeScreen.Debug();
var
  BMP, i, c: Integer;
begin
  BMP := BitmapFromClient(GetClientBounds());

  DrawTPABitmap(BMP, EdgeFromBox(Self.FBounds), $00FFFF);
  DrawTPABitmap(BMP, EdgeFromBox(Self.FItemBounds), $00FFFF);
  DrawTPABitmap(BMP, EdgeFromBox(Self.FTitleBounds), $00FFFF);
  DrawTPABitmap(BMP, EdgeFromBox(Self.CloseButton), $00FFFF);

  c := 255;
  for i:=0 to High(Self.FBoxes) do
  begin
    DrawTextBitmap(BMP, ToStr(i), StatChars07,Point(Self.FBoxes[i].x1+3,Self.FBoxes[i].y1+3), False, $FFFFFF);
    DrawTPABitmap(BMP, EdgeFromBox(Self.FBoxes[i]), c);
    DrawTPABitmap(BMP, EdgeFromBox(Self.FItemBoxes[i]), c);
    c := i + ((c * 126) and $FFFFFF);
  end;

  ShowBitmap(BMP);
  FreeBitmap(BMP);
end;


function TRSMakeScreen.IsUpText(SubStrs: TStringArray; WaitTime: UInt32 = 350): Boolean;
var
  TimeOut: UInt64;
begin
  Result := False;
  TimeOut := GetTickCount64() + (WaitTime + Random(-20, 50));

  while (TimeOut >= GetTickCount64()) do
  begin
    if (IsArrInStr(SubStrs, Self.GetUpText())) then
      Exit(True);

    Wait(Random(35, 75));
  end;
end;


function TRSMakeScreen.GetUpText(): String;
const
  OCR_RULES_UPTEXT: TCompareRules = [-1, 85, True, 85];
var
  client:T2DIntArray;
  bmp:Int32;
begin
  bmp := BitmapFromClient(mainscreen.UpTextArea);
  FastReplaceColor(bmp, 2070783, 3424329);
  client := BitmapToMatrix(bmp);
  Result := OCR.RecognizeEx(client, OCR_RULES_UPTEXT, UpFont);
  FreeBitmap(bmp);
end;


function TRSMakeScreen.GetTitle(): String;
begin
  with Self.FTitleBounds do
    Result := GetTextAtEx(X1,Y1,X2,Y2, 1,3,4, 2070783, 1, UpChars07_s);
end;


function TRSMakeScreen.Select(Id: Int32; Amount: Int32; UpText: String): Boolean;
var
  str: String;
begin
  if Id >= Length(Self.FBoxes) then
    Exit(False);

  if Amount <= 28 then
    str := ' '+ToStr(Amount)+' '
  else
    str := ' All ';

  Mouse.Move(Self.FItemBoxes[id]);
  WaitEx(120,20);
  if Self.IsUpText([UpText]) or (UpText = '') then
  begin
    Result := ChooseOption.Select(str, mouse_left, False);
    if (not Result) and ChooseOption.Select(' X ') then
      Result := Chatbox.AnswerQuery('Enter amount', ToStr(Amount), Random(3800,4600));
  end;

  if Result then
    Result := Self.IsClosed();
end;


function TRSMakeScreen.Close(): Boolean;
begin
  Mouse.Click(Self.CloseButton, mouse_Left);
  Result := Self.IsClosed();
end;


// -----------------------------------------------------------------------------
// Create the various screens:

function MakeScreen(Columns, Rows: Int32; Padding: TBox; FontName: String; FontColors: TIntArray): TRSMakeScreen;
begin
  Result.__Setup();
  Result.Columns    := Columns;
  Result.Rows       := Rows;
  Result.Padding    := Padding;
  Result.FontName   := FontName;
  Result.FontColors := FontColors;
end;


var
  SmithingScreen: TRSMakeScreen := MakeScreen(6,5,[4,0,-5,-4], 'StatChars07', [$FFFFFF,0]);
