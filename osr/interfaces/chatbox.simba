(*
Chatbox
=======
The chatbox file holds functions and procedures that are used in the
Runescape chat box.
*)

(*
type TRSChatbox
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape chat box interface.
*)
type 
  EChatTab = (ctAll, ctGame, ctPublic, ctPrivate, ctClan, ctTrade);

  TRSChatbox = record(TInterfaceBase)
    FLines: TBoxArray;
    FTabs: TBoxArray;
  end;

  TChatOption = record
    Text: String;
    b: TBox;
  end;

(*
var Chatbox
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape chatbox interface.
*)
var
  Chatbox: TRSChatbox;

(*
const CHATBOX_COLORS
~~~~~~~~~~~~~~~~~~~~
constant that holds all the possible text-colors
*)
const
  CHATBOX_COLORS:TIntArray = [0, $7F, $FF0000, $7F007F, $2010EF];

{$IFNDEF CODEINSIGHT}
procedure TRSChatbox.__Setup();
var i:Int32;
begin
  Self.FBounds := [6,344,512,474];
  Self.FName := 'Chatbox';
  Self.FStatic := True;
  for i := 0 to 7 do Self.FLines += Box(10, 344+14*i, 496, 360+14*i+1);
  Self.FLines += Box(10,458,500,474); //input-field
  Self.FTabs := Box(1,480,394,501).PartitionEx(1,6,0,-6);
end;

procedure TRSChatbox.Debug();
var
  BMP:TMufasaBitmap;
begin
  BMP := GetMufasaBitmap( BitmapFromClient(SRL.DefaultClientBounds) );
  BMP.DrawBoxes(Self.FTabs, False, $0000FF);
  BMP.DrawBoxes(Self.FLines, False, $FFFFFF);
  BMP.DrawBox(FBounds, False, $00FF00);
  BMP.Debug();
  BMP.Free();
end;
{$ENDIF}


(*
Chatbox.GetTextOnLine
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChatbox.GetTextOnLine(line: Int32; colors:TIntegerArray = CHATBOX_COLORS): String;

Returns the text at the given line ``[0..8]``. 8 is the last line (the input-field)

.. note:: by slacky

Example:
.. code-block:: pascal

    // returns the text at line 6
    chatbox.GetTextOnLine(6);
*)
function TRSChatbox.GetTextOnLine(line: Int32; colors:TIntegerArray = CHATBOX_COLORS): String;
var
  color,bmp: Int32;
  textArr,temp: TPointArray;
  B: TBox := Self.FLines[line];
begin
  for color in colors do
  begin
    FindColorsTolerance(temp, color, B.x1,B.y1,B.x2,B.y2, 0);
    textArr := CombineTPA(textArr, temp);
  end;
  if Length(textArr) = 0 then 
    Exit;

  OffsetTPA(textArr, [-B.x1,-B.y1]);
  BMP := CreateBitmap(B.x2-B.x1+1,B.y2-B.y1+2);
  DrawTPABitmap(BMP,textArr,255);

  Result := OCR.RecognizeEx(BitmapToMatrix(bmp),TCompareRules([255]), SmallFont);
  FreeBitmap(bmp);
end;

(*
Chatbox.FindTextOnLines
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.FindTextOnLines(txt: TStringArray; lines: TIntegerArray; colors:TIntegerArray = CHATBOX_COLORS): boolean;

Returns true if the text in 'txt' is found on the 'lines' of the chatbox.  The
lines start with 0 being the bottom chat line.

.. note:: by slacky

Example:

.. code-block:: pascal

    // returns True if "Hello" is found on the first 4 lines
    chatbox.FindTextOnLines(['Hello'], [0..3]);
*)
function TRSChatbox.FindTextOnLines(txt: TStringArray; lines: TIntegerArray; colors:TIntegerArray = CHATBOX_COLORS): Boolean;
var
  line: Int32;
begin
  for line in lines do
    if IsArrInStr(txt, Self.GetTextOnLine(line, colors)) then
      Exit(True);
end;


(*
Chatbox.GetLastMessage
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChatbox.GetLastMessage(colors:TIntegerArray = CHATBOX_COLORS): String;

Returns the text at the last line in the chatbox

.. note:: by slacky
*)
function TRSChatbox.GetLastMessage(colors:TIntegerArray = CHATBOX_COLORS): String;
begin
  Result := Self.GetTextOnLine(High(Self.FLines)-1, colors);
end;


(*
Chatbox.GetChatArea
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.GetChatArea(): TBox;

Returns a TBox which only covers the chat-area, does not include the scrollbar and input-field.

.. note:: by slacky
*)
function TRSChatbox.GetChatArea(): TBox;
begin
  with self.FBounds do
    result := [x1, y1, x2-16, y2-16];
end;


(*
Chatbox.ClickContinue
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.ClickContinue(): Boolean;

Clicks the "Click here to continue"-text in the chatbox.
Returns `True` if the text was found.

.. note:: by slacky
*)
function TRSChatbox.ClickContinue(): Boolean;
var
  tpa:Array [0..2] of TPoint;
begin
  //match each word separately to avoid any future whitespace-issues.
  Result := (srl.FindText(tpa[0], 'Click',   'CharsNPC07', self.FBounds) and
             srl.FindText(tpa[1], 'here',    'CharsNPC07', self.FBounds) and
             srl.FindText(tpa[2], 'continue','CharsNPC07', self.FBounds));
  if Result then
  begin
    tpa[2].y += 15;
    mouse.Click(GetTPABounds(tpa), mouse_left);
    Exit();
  end;
end;


(*
Chatbox.HandleLevelUp
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.HandleLevelUp(): Boolean;

Clicks the "Click here to continue" if text containing `Congratulations` was found

.. note:: by Olly
*)
function TRSChatbox.HandleLevelUp(): Boolean;
const
  C_CHAR_POS: TPoint = [107, 383];
  TEXT_COL = 8388608;
var
  p: TPoint;
begin
  if (srl.FindText(p, 'Congratulations', 'CharsNPC07', TEXT_COL, 0, Self.FBounds)) then
  begin
    Result := Self.ClickContinue();
    while Self.GetDisplayName() = '' do
    begin
      Wait(60);
      Self.ClickContinue();
    end;
  end;
end;

(*
Chatbox.GetOptions
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.GetOptions(TextColors: TIntegerArray = [clBlack, clWhite]): array of TChatOption;

Returns all the options found in teh chatbox area
*)
function TRSChatbox.GetOptions(TextColors: TIntegerArray = [clBlack, clWhite]): array of TChatOption;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i, color: Integer;
  b: TBox;
  s: String;
begin
  SetLength(ATPA, Length(TextColors));
  for i := 0 to High(ATPA) do
    FindColors(ATPA[i], TextColors[i], Self.FBounds);
  TPA := MergeATPA(ATPA);

  if (Length(TPA) < 10) then
    Exit;

  for TPA in ClusterTPAEx(TPA, 15, 1) do
  begin
    b := GetTPABounds(TPA);
    b.Expand(1);
    for color in TextColors do
    begin
      s := OCR.Recognize(b, TCompareRules([color]), NPCFont);
      if (s <> '') then
        Result += TChatOption([s, GetTPABounds(TPA)]);
    end;
  end;
end;

(*
Chatbox.ClickOption
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.ClickOption(const Text: TStringArray; TextColors: TIntegerArray = [clBlack, clWhite]): Boolean;
    function TRSChatbox.ClickOption(const Text: TStringArray; WaitTime: Integer; TextColors: TIntegerArray = [clBlack, clWhite]): Boolean; overload;

Clicks the preferred option by text. If the option cant be found it will return with `False`.
*)
function TRSChatbox.ClickOption(const Text: TStringArray; TextColors: TIntegerArray = [clBlack, clWhite]): Boolean;
var
  option: TChatOption;
begin
  Result := False;
  
  for option in Self.GetOptions(TextColors) do
  begin
    if (IsArrInStr(Text, option.Text)) then
    begin
      Mouse.Click(option.b, mouse_Left);
      Exit(True);
    end;
  end;
end;

function TRSChatbox.ClickOption(const Text: TStringArray; WaitTime: Integer; TextColors: TIntegerArray = [clBlack, clWhite]): Boolean; overload;
var
  t: UInt64;
begin
  t := GetTickCount64() + (WaitTime + Random(200));
  repeat
    if (Self.ClickOption(Text, TextColors)) then
      Exit(True);
    Wait(Random(50, 150));
  until (GetTickCount64() >= t);
end;

(*
Chatbox.PleaseWait
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.PleaseWait(): Boolean;

Waits as long as the "Please wait" text exists.
*)
function TRSChatbox.PleaseWait(): Boolean;
var
  tpa: array [0..1] of TPoint;
  t: UInt64;
begin
  Result := False;
  t := GetTickCount64() + Random(1500, 2500);

  while (not Result) and (t > GetTickCount64()) do
  begin
    Result := (srl.FindText(tpa[0], 'Please',   'CharsNPC07', self.FBounds) and
               srl.FindText(tpa[1], 'wait',    'CharsNPC07', self.FBounds));
    Wait(Random(50, 100));
  end;

  if (Result) then
  begin
    t := GetTickCount64() + Random(4000, 5000);
    while (t > GetTickCount64()) do
    begin
      if not (srl.FindText(tpa[0], 'Please',   'CharsNPC07', self.FBounds) and
              srl.FindText(tpa[1], 'wait',    'CharsNPC07', self.FBounds)) then
        begin
          Wait(Random(300, 500));
          Exit;
        end;

      Wait(Random(50, 100));
    end;
  end;
end;

(*
Chatbox.ChatToOption
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.ChatToOption(Option: TStringArray; ClickOption: Boolean; TextColors: TIntegerArray = [clBlack, clWhite]): Boolean;

I have no clue wtf this is. Therefor it's either a stupid or an awesome function!
Seems to be a function that should have been named something like `ContinueToOption` (as in click continue until it no longer can)
*)
function TRSChatbox.ChatToOption(Option: TStringArray; ClickOption: Boolean; TextColors: TIntegerArray = [clBlack, clWhite]): Boolean;
var
  opt: TChatOption;
  t: UInt64;
  b: Boolean = False;
begin
  Result := False;

  repeat
    for opt in Self.GetOptions(TextColors) do
    begin
      if (IsArrInStr(Option, opt.Text)) then
      begin
        if (ClickOption) then
          Mouse.Click(opt.b, mouse_Left);
        Exit(True);
      end;
    end;

    t := GetTickCount64() + Random(1000, 1500);
    while (t > GetTickCount64()) do
    begin
      if (ClickContinue()) then
      begin
        b := True;
        Break;
      end else
        b := False;

      Wait(Random(50, 100));
    end;

    if (b = False) then
      Exit(False);

    self.PleaseWait();
    Wait(Random(150, 300));
  until (not srl.isLoggedIn());
end;

(*
Chatbox.GetDisplayName
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.GetDisplayName(): String;

Returns your username / display name
*)
function TRSChatbox.GetDisplayName(): String;
var
  s: String;
  p: Integer;
begin
  s := Self.GetTextOnLine(High(Self.FLines), [$000000]);
  if ((p := Pos(':', s)) > 0) then
    Result := Copy(s, 1, p - 1);
end;

(*
Chatbox.ClickTab
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.ClickTab(tab: EChatTab; Option: String = ''): Boolean;

A tab would be the filters for the chatbox. So you click one of them..
*)
function TRSChatbox.ClickTab(tab: EChatTab; Option: String = ''): Boolean;
begin
  Result := True;

  if (Option = '') then
    Mouse.Click(FTabs[ord(tab)], mouse_Left)
  else
  begin
    Mouse.Move(FTabs[ord(tab)]);
    if (not ChooseOption.Open()) or (not ChooseOption.Select(Option)) then
      Exit(False);
  end;
end;

(*
Chatbox.GetQuery
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.GetQuery(answer:Boolean=False): String;

Returns the question-text, like "Enter amount:" when doing "Withdraw X" from a bank.
If `answer` is `True` it returns the value you have filled in.
*)
function TRSChatbox.GetQuery(answer:Boolean=False): String;
var
  color: Int32;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  b: TBox;
begin
  if answer then
    color := 8388608; //otherwise 0 for black

  if (CountColor(8388608, Self.GetChatArea) > 5) then // Color of input text ( "*" is always there )
  begin
    FindColors(TPA, color, Self.GetChatArea());
    if (Length(TPA) < 5) then
      Exit;

    ATPA := ClusterTPAEX(TPA, 10, 4);
    SortATPAFromFirstPointY(ATPA, Point(0, 0));
    b := GetTPABounds(ATPA[0]);
    Result := GetTextAtEx(B, 0,3,4, color,0, 'UpChars07_s');
    if answer then
      SetLength(Result, Length(Result)-1);
  end;
end;

(*
Chatbox.WaitQuery
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.WaitQuery(Query: String; WaitTime: Int32): Boolean;

Wait till the query shows up. If it doesn't show up within `WaitTime` it returns `False`.
*)
function TRSChatbox.WaitQuery(Query: String; WaitTime: Int32): Boolean;
var
  t: UInt64;
begin
  Result := False;
  t := GetTickCount() + WaitTime;
  while (t > GetTickCount()) do
  begin
    if (Pos(Query, Self.GetQuery()) > 0) then
      Exit(True);
    Wait(Random(100, 200));
  end;
end;

(*
Chatbox.AnswerQuery
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatbox.AnswerQuery(Query, Response: String; WaitTime: Int32; PressEnter:Boolean=True): Boolean;

Answer the query, first it will wait for the quary `Query` to show up, then it fills in the given `Response`.
*)
function TRSChatbox.AnswerQuery(Query, Response: String; WaitTime: Int32; PressEnter:Boolean=True): Boolean;
begin
  Result := Self.WaitQuery(Query, WaitTime);
  if result and (Response <> Self.GetQuery(True)) then
  begin
    while Length(Self.GetQuery(True)) > 1 do
    begin
      Keyboard.PressKey(VK_BACK);
      Wait(Random(45,125));
    end;

    Keyboard.Send(Response);
    if PressEnter then
    begin
      Wait(Random(120, 400));
      Keyboard.PressKey(VK_ENTER);
    end;
  end;
end;

(*
Chatbox.GetTitle
~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSChatBox.GetTitle: String;

Returns the title of a chatbox interaction such as the NPC name.

.. note:: by Olly
*)
function TRSChatBox.GetTitle(): String;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  b: TBox;
begin
  FindColors(TPA, 128, Self.GetChatArea());
  if (Length(TPA) < 10) then
    Exit;

  ATPA := ClusterTPAEX(TPA, 1, 5);
  SortATPAFromFirstPointX(ATPA, Point(0, 0));
  b := GetTPABounds(ATPA[0]);
  b.Y1 -= 1;
  b.X2 := GetTPABounds(ATPA[High(ATPA)]).X2;
  b.Y2 += 5;
  Result := OCR.Recognize(b, TCompareRules([128]), NPCFont);
end;

begin
  Chatbox.__Setup();
end;
