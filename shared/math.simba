(*
srl.Modulo
~~~~~~~~~~
.. code-block:: pascal

    function TSRL.Modulo(X, Y: Double): Double;

This function returns the remainder from the division of the first argument by the second.
It will always returns a result with the same sign as its second operand (or zero).

Example:

.. code-block:: pascal

    Writeln(srl.Modulo(a, b));
*)
function TSRL.Modulo(X, Y: Double): Double; static;
begin
  Result := X - Floor(X / Y) * Y;
end;

(*
srl.Modulo; overload
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TSRL.Modulo(X, Y: Int32): Int32; overload;

Integer overload for Modulo.
*)
function TSRL.Modulo(X, Y: Int32): Int32; static; overload;
begin
  Result := X - Floor(X / Y) * Y;
end;

(*
srl.CrossProduct
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TSRL.CrossProduct(ry,ry, px,py, qx,qy: Double): Double;
    
Cross-product of rp and rq vectors.
*)
function TSRL.CrossProduct(rx,ry, px,py, qx,qy: Double): Double; static;
begin
  Result := (px - rx) * (qy - ry) - (py - ry) * (qx - rx);
end;

(*
srl.CrossProduct; overload;
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TSRL.CrossProduct(r, p, q: TPoint): Int64; overload;
    
Cross-product of rp and rq vectors.
*)
function TSRL.CrossProduct(r, p, q: TPoint): Int64; static; overload;
begin
  Result := (p.x-r.x) * (q.y-r.y) - (p.y-r.y) * (q.x-r.x);
end;


(*
srl.DeltaAngle
~~~~~~~~~~

.. code-block:: pascal

    function TSRL.DeltaAngle(DegA, DegB: Double; R: Double = 360): Double;

Returns the shortest difference between two given angles.

Example:

.. code-block:: pascal

    Writeln(srl.DeltaAngle(350.0, 10.0));
*)
function TSRL.DeltaAngle(DegA, DegB: Double; R: Double = 360): Double; static;
begin
  Result := Modulo((DegA - DegB + R/2), R) - R/2;
end;

(*
srl.PointInRect
~~~~~~~~~~~

.. code-block:: pascal

    function TSRL.PointInRect(const Pt: TPoint; const A, B, C, D: TPoint): Boolean;

Returns true if the TPoint 'Pt' is in a rect (defined by four points).

.. note:: by slacky

Example:

.. code-block:: pascal

    Writeln(PointInRect(Point(100, 100), Point(0, 0), Point(200, 1), Point(201, 201), Point(0, 225)));
*)
function TSRL.PointInRect(const Pt: TPoint; const A, B, C, D: TPoint): Boolean; static;
var
  Vec:TPoint;
  Dot:Extended;
begin
  Vec := Point(A.x-B.x, A.y-B.y);
  Dot := ((A.x-Pt.x) * Vec.x) + ((A.y-Pt.y) * Vec.y);
  if not((0 <= Dot) and (Dot <= (Sqr(Vec.x) + Sqr(Vec.y)))) then
    Exit(False);
  Vec := Point(A.x-D.x, A.y-D.y);
  Dot := ((A.x-Pt.x) * Vec.x) + ((A.y-Pt.y) * Vec.y);
  if not((0 <= Dot) and (Dot <= (Sqr(Vec.x) + Sqr(Vec.y)))) then
    Exit(False);
  Result := True;
end;


{*
 Check if a point is within a circle.
*}
function TSRL.PointInCircle(PT, Center: TPoint; Radius: Double): Boolean; static;
begin
  Result := Sqr(PT.X - Center.X) + Sqr(PT.Y - Center.Y) <= Sqr(Radius);
end;

  
{*
 Check if a point is within a ellipse.
*}
function TSRL.PointInEllipse(PT, Center:TPoint; YRad, XRad: Double): Boolean; static;
var
  X, Y: Integer;
begin
  X := PT.X - Center.X;
  Y := PT.Y - Center.Y;
  Result := (Sqr(X)*Sqr(YRad))+(Sqr(Y)*Sqr(XRad)) <= (Sqr(YRad)*Sqr(XRad));
end; 

{* 
 Check if a point is within a polygon/shape by the given outline points (poly)
 The points must be in order, as if you would draw a line trough each point.
 
 Winding number algorithm
*}
function TSRL.PointInPoly(pt:TPoint; Poly:TPointArray): Boolean; static; 
var
  wn,H,i,j:Int32;
begin
  wn := 0;
  H := High(poly);
  j := H;
  for i:=0 to H do 
  begin
    if (poly[i].y <= pt.y) then 
    begin
      if (poly[j].y > pt.y) then
        if (((poly[j].x-poly[i].x)*(pt.y-poly[i].y)-(pt.x-poly[i].x)*(poly[j].y-poly[i].y)) > 0) then
          Inc(wn);
    end else
      if poly[j].y <= pt.y then
        if (((poly[j].x-poly[i].x)*(pt.y-poly[i].y)-(pt.x-poly[i].x)*(poly[j].y-poly[i].y)) < 0) then
          Dec(wn);
    j := i;
  end;
  Result := (wn <> 0);
end;
