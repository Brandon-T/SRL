type
  TRectangle = record 
    Top, Right, Btm, Left: TPoint; 
  end;
  TRectArray = array of TRectangle;   
  ESplitDirection = (rpTopLeft, rpBtmRight);


(*
TRectangle.DirByLen
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRectangle.DirByLen(Longest: Boolean=True): ESplitDirection; constref;

Returns the direction which is the longest or shortest.

.. note:: by slacky
*)
function TRectangle.DirByLen(Longest: Boolean=True): ESplitDirection; constref;
begin
  if (Hypot(Left.y-Top.y, Left.x-Top.x) > Hypot(Left.y-Btm.y, Left.x-Btm.x)) = Longest then
    Result := rpTopLeft
  else
    Result := rpBtmRight;
end;


(*
TRectangle.Partition
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRectangle.Partition(m,n:Int32; dir:ESplitDirection=rpTopLeft): TRectArray; constref;

Break the rectangle into smaller rectangles. Goes well along with `DirByLen`

.. note:: by slacky
*)
function TRectangle.Partition(m,n:Int32; dir:ESplitDirection=rpTopLeft): TRectArray; constref;
var
  i: Int32;
  a: Double;
  box: TBox;
  lf: TPoint;
  function PartitionBox(B: TBox; Rows, Cols: Int32): TBoxArray;
  var
    idx,x,y: Int32;
    BoxW,BoxH: Single;
  begin
    SetLength(Result, Cols * Rows);
    BoxW := (B.x2 - B.x1 + 1) / Cols;
    BoxH := (B.y2 - B.y1 + 1) / Rows;
    for y:=0 to Rows-1 do
      for x:=0 to Cols-1 do
      begin
        idx := (Y * Cols) + X;
        Result[idx].x1 := Ceil(B.x1 + (BoxW * x));
        Result[idx].y1 := Ceil(B.y1 + (BoxH * y));
        Result[idx].x2 := Trunc(B.x1 + (BoxW * x) + BoxW);
        Result[idx].y2 := Trunc(B.y1 + (BoxH * y) + BoxH);
      end;
  end;
begin
  if dir <> rpTopLeft then Swap(m,n);
  SetLength(Result, m*n);
  a  := ArcTan2(Left.y-Btm.y, Left.x-Btm.x) + PI/2;
  lf := Left;
  box.x1 := Left.x;
  box.y1 := Left.y;
  box.x2 := Left.x + Round(Hypot(Left.y-Top.y, Left.x-Top.x));
  box.y2 := Left.y + Round(Hypot(Left.y-Btm.y, Left.x-Btm.x));
  for box in PartitionBox(box, m,n) do
  begin
    Result[i].Top   := RotatePoint(Point(box.x1, box.y1), a, lf.x, lf.y);
    Result[i].Right := RotatePoint(Point(box.x2, box.y1), a, lf.x, lf.y);
    Result[i].Btm   := RotatePoint(Point(box.x2, box.y2), a, lf.x, lf.y);
    Result[i].Left  := RotatePoint(Point(box.x1, box.y2), a, lf.x, lf.y);
    Inc(i);
  end;
end;


(*
TRectangle.ToTPA
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRectangle.ToTPA(): TPointArray; constref;

TPA from the rectangle.

.. note:: by slacky
*)
function TRectangle.ToTPA(): TPointArray; constref;
begin
  Result := [Top, Right, Btm, Left];
end;


(*
TRectangle.Mean
~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRectangle.Mean(): TPoint; constref;

Middle of the rectangle

.. note:: by slacky
*)
function TRectangle.Mean(): TPoint; constref;
begin
  Result := MiddleTPA(Self.ToTPA());
end;


(*
TRectangle.Filter
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRectangle.Filter(TestSet: TPointArray): TPointArray; constref;

Extract all the points from `TestSet` that fits within this rectangle.

.. note:: by slacky
*)
function TRectangle.Filter(TestSet: TPointArray): TPointArray; constref;
var
  i, h, count: UInt32;
  Vec: TPoint;
  Dot: Extended;
begin
  h := High(TestSet);
  if (h < 0) then
    Exit;
  
  SetLength(Result, Length(TestSet));
  count := 0;
  for i := 0 to h do
  begin
    Vec := Point(Top.x-Right.x, Top.y-Right.y);
    Dot := ((Top.x-TestSet[i].x) * Vec.x) + ((Top.y-TestSet[i].y) * Vec.y);
    if not ((0 <= Dot) and (Dot <= (Sqr(Vec.x) + Sqr(Vec.y)))) then
      Continue;
    
    Vec := Point(Top.x-Left.x, Top.y-Left.y);
    Dot := ((Top.x-TestSet[i].x) * Vec.x) + ((Top.y-TestSet[i].y) * Vec.y);
    if not ((0 <= Dot) and (Dot <= (Sqr(Vec.x) + Sqr(Vec.y)))) then
      Continue;
    
    Result[count] := TestSet[i];
    Inc(count);
  end;
  SetLength(Result, Count);
end;


(*
TRectangle.Expand
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRectangle.Expand(Inc: Int32): TRectangle; constref;

Increase or decrease the dimensions of the rectangle.

.. note:: by slacky
*)
function TRectangle.Expand(Inc: Int32): TRectangle; constref;
var
  TPA: TPointArray;
  function Expand(Poly: TPointArray; inc: Int32): TPointArray;
  type
    TPointF = record x,y:Double; end;
  var
    i,k:Int32;
    theta, det: Double;
    c1,c2:array [0..2] of Double;
    p1,q1,p2,q2: TPointF;
    tmp:array of TPointF;
  begin
    SetLength(Result, Length(Poly));
    SetLength(tmp, Length(Poly)*2);
    for i:=0 to High(Poly) do
    begin
      k := (i+1) mod Length(poly);
      theta := ArcTan2(poly[i].Y - poly[k].Y, poly[i].X - poly[k].X) + PI/2;
      tmp[i*2]  := TPointF([inc*Cos(theta)+poly[i].x, inc*Sin(theta)+poly[i].y]);
      tmp[i*2+1]:= TPointF([inc*Cos(theta)+poly[k].x, inc*Sin(theta)+poly[k].y]);
    end;
   
    for i:=0 to High(tmp) with 2 do
    begin
      p1 := tmp[i];
      p2 := tmp[(i+1) mod Length(tmp)];
      q1 := tmp[(i+2) mod Length(tmp)];
      q2 := tmp[(i+3) mod Length(tmp)];
   
      c1 := [(p1.y-p2.y), (p2.x-p1.x), -(p1.x*p2.y-p2.x*p1.y)];
      c2 := [(q1.y-q2.y), (q2.x-q1.x), -(q1.x*q2.y-q2.x*q1.y)];
      det  := c1[0] * c2[1] - c1[1] * c2[0];
      if (det <> 0) then
      begin
        Result[i div 2].x := Round((c1[2] * c2[1] - c1[1] * c2[2]) / det);
        Result[i div 2].y := Round((c1[0] * c2[2] - c1[2] * c2[0]) / det);
      end else
        Result[i div 2] := Point(Round(p2.x), Round(p2.y));
    end;
  end;
begin
  TPA := Expand(Self.ToTPA(), Inc);
  Result := [TPA[0], TPA[1], TPA[2], TPA[3]];
end;

