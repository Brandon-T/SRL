(*
String
======
String related methods
*)

(* 
 `AnsiString` is used instead of `string`, because 
  code completion doesn't support `string`
  
  Another code completion workaround:
*)
{$IFDEF CodeInsight}type String = AnsiString;{$ENDIF}
const STR_WHITESPACE := #9#10#11#12#13#32;

function AnsiString.Len(): Integer;
begin
  Result := Length(Self);
end;

function AnsiString.Pos(SubStr: String): Int32; constref;
begin
  Result := System.Pos(SubStr, self);
end;

function AnsiString.PosR(SubStr: String): Int32; constref;
var 
  list:TIntegerArray;
begin
  list := System.PosMulti(SubStr, self);
  if Length(list) > 0 then
    Result := list[high(list)]
  else
    Result := 0;
end;

function AnsiString.PosEx(SubStr: String): TIntegerArray; constref;
begin
  Result := System.PosMulti(SubStr, self);
end;

function AnsiString.Startswith(Prefix: String): Boolean; constref;
begin
  Result := Self.Pos(Prefix) = 1;
end;

function AnsiString.Endswith(Suffix: String): Boolean; constref;
var
  i,l: Int32;
begin
  if Length(Suffix) > Length(Self) then
    Exit(False);
  Result := True;
  l := Length(Self);
  for i:=1 to Length(Suffix) do
    if (Suffix[i] <> Self[l-Length(Suffix)+i]) then
      Exit(False);
end;

function AnsiString.Capitalize(): String; constref;
begin
  Result := System.Capitalize(Self);
end;

function AnsiString.Upper(): String; constref;
begin
  Result := Uppercase(Self);
end;

function AnsiString.Lower(): String; constref;
begin
  Result := Lowercase(Self);
end;

(*
  Copy the string from after the first occurrence of SubStr
*)
function AnsiString.After(SubStr: String): String; constref;
var
  p: UInt32;
begin
  p := System.Pos(SubStr, Self);
  if (p = 0) then Exit(Self);
  Inc(p, Length(SubStr));
  Result := Copy(Self, p, Length(Self) - p + 1);
end;

(*
  Copy the string from before the first occurrence of SubStr
*)
function AnsiString.Before(SubStr: String): String; constref;
var
  p: UInt32;
begin
  p := System.Pos(SubStr, Self);
  if (p = 0) then Exit(Self);
  Result := Copy(Self, 1, p - 1);
end;

(*
  Count the number of occurrences of the given string.
*)
function AnsiString.Count(Str: String): Integer;
begin
  Result := Length(Self.PosEx(Str));
end;

(*
  Replace occurrences of the given SubStr with with ReplaceStr
  For larger string this algorithm is way faster than `Replace` in Simba.

  Fix me!!!
*)
function AnsiString.Replace(SubStr, ReplaceStr: String; Flags: TReplaceFlags=[rfReplaceAll]): String; constref;
begin
  Result := StringReplace(Self, SubStr, ReplaceStr, Flags);
end;
{
function AnsiString.Replace(SubStr, ReplaceStr: String; Flags: TReplaceFlags=[rfReplaceAll]): String; constref;
var
  Hi,HiSub,HiRep,i,j,k: Integer;
  Prev,Curr:Integer;
  Subs: TIntegerArray;
  strCmp: function(s1,s2:string):Int32;
begin
  Hi := Length(Self);
  if Hi = 0 then Exit;

  HiRep := Length(ReplaceStr);
  HiSub := Length(SubStr);
  if HiSub = 0 then Exit(Self);
  
  strCmp := @CompareStr;
  if (rfIgnoreCase in Flags) then strCmp := @CompareText;
  
  k := 1;
  Prev := 1;
  case (rfReplaceAll in Flags) of
  True:
    begin
      //If substring and replacement string is only 1 char, then it's simpler:
      if (HiRep = 1) and (HiSub = 1) then begin
        Result := Copy(Self,1,hi);
        for i:=1 to Length(Self) do
          if strCmp(Self[i], SubStr[1]) = 0 then
            Result[i] := Self[i];
        Exit();
      end;
      
      case (rfIgnoreCase in Flags) of
        True: Subs := LowerCase(Self).PosEx(LowerCase(SubStr));
        False:Subs := Self.PosEx(SubStr);
      end;
      
      SetLength(Result, Hi + (Length(Subs) * (HiRep-HiSub)));
      if Length(Subs) = 0 then Exit(Copy(Self, 1,Hi));
      for i:=0 to High(Subs) do
      begin
        Curr := Subs[i];
        j := (Curr-Prev);
        MemMove(Self[Prev], Result[k], j);
        k += j;
        if HiRep > 0 then
        begin
          MemMove(ReplaceStr[1], Result[k], HiRep);
          k += HiRep;
        end;
        Prev := Curr + HiSub;
      end;
      if Prev <= Hi then
        MemMove(Self[Prev], Result[k], Hi-Prev+1);
    end;
  False:
    begin
      SetLength(Result, Hi + (HiRep-HiSub));
      case (rfIgnoreCase in flags) of
        True: Curr := LowerCase(Self).Pos(LowerCase(SubStr));
        False:Curr := Self.Pos(SubStr);
      end;
      if Curr = 0 then Exit(Copy(Self, 1,Hi));

      MemMove(Self[1], Result[1], Curr-1);
      if HiRep > 0 then MemMove(ReplaceStr[1], Result[Curr], HiRep);
      MemMove(Self[(Curr+HiSub)], Result[Curr+HiRep], Hi-(Curr+HiSub)+1);
      SetLength(Result, Hi+(HiRep-HiSub));
    end;
  end;
end;
}

(*
  Blow up the string at each delimiter into smaller strings
*)
function AnsiString.Explode(Delimiter: String): TStringArray; constref;
begin
  Result := System.Explode(Delimiter, Self);
end;

{*
  Return a copy of the string with leading and trailing characters removed.
*}
function AnsiString.Strip(Chars:String = STR_WHITESPACE): String; constref;
var Lo,Hi: UInt32 = 1;
begin
  Hi:=Length(Self);
  while (Lo <= Hi) and (System.Pos(Self[Lo],Chars) <> 0) do Inc(Lo);
  while (Hi >= 1)  and (System.Pos(Self[Hi],Chars) <> 0) do Dec(Hi);
  Result := Copy(Self, Lo, Hi-Lo+1);
end;


{*
  Return a copy of the string with leading characters removed.
*}
function AnsiString.StripL(Chars:String = STR_WHITESPACE): String; constref;
var Lo,Hi: UInt32 = 1;
begin
  Hi:=Length(Self);
  while (Lo <= Hi) and (System.Pos(Self[Lo],Chars) <> 0) do Inc(Lo);
  Result := Copy(Self, Lo, Hi-Lo+1);
end;  


{*
  Return a copy of the string with trailing characters removed.
*}
function AnsiString.StripR(Chars:String = STR_WHITESPACE): String; constref;
var Lo,Hi: UInt32 = 1;
begin
  Hi:=Length(Self);
  while (Hi >= 1) and (System.Pos(Self[Hi],Chars) <> 0) do Dec(Hi);
  Result := Copy(Self, Lo, Hi-Lo+1);
end; 

(*
  test if a string only contains alpha numerical characters.
*)
function AnsiString.IsAlphaNum(): Boolean; constref;
var ptr: PChar; hiptr:PtrUInt;
begin
  if Length(Self) = 0 then Exit(False);
  ptr := PChar(Self);
  hiptr := PtrUInt(PtrUInt(ptr) + Length(self));
  while PtrUInt(ptr) < hiptr do
    if not (ptr^ in ['0'..'9','a'..'z','A'..'Z']) then
      Exit(False)
    else
      Inc(ptr);
  Result := True;
end;

function Char.IsAlphaNum(): Boolean; constref;
begin
  Result := (Self in ['A'..'Z', 'a'..'z','0'..'9']);
end;

(*
  test if a sting is a digit
*)
function AnsiString.IsDigit(): Boolean; constref;
var 
  ptr: PChar;
  hiptr:PtrUInt;
begin
  if Length(Self) = 0 then Exit(False);
  ptr := PChar(Self);
  hiptr := PtrUInt(PtrUInt(ptr) + Length(self));
  while PtrUInt(ptr) < hiptr do
    if not (ptr^ in ['0'..'9']) then
      Exit(False)
    else
      Inc(ptr);
  Result := True;
end;

function Char.IsDigit(): Boolean; constref;
begin
  Result := (Self in ['0'..'9']);
end;

(*
  test if a string is a floating point number
*)
function AnsiString.IsFloat(): Boolean; constref;
var 
  ptr: PChar; 
  hiptr:PtrUInt; 
  i:Int32; 
  dotAdded:Boolean;
begin
  if Length(Self) = 0 then Exit(False);
  ptr := PChar(Self);
  i:=0;
  hiptr := PtrUInt(PtrUInt(ptr) + Length(self));
  while PtrUInt(ptr) < hiptr do
    if not (ptr^ in ['0'..'9']) then
      if (i >= 1) and (ptr^ = '.') and not(dotAdded) then
      begin
        Inc(ptr);
        inc(i);
        dotAdded:=True;
      end else
        Exit(False)
    else begin
      Inc(ptr);
      inc(i);
    end;
  Result := True;
end;

function Char.IsFloat(): Boolean; constref;
begin
  Result := String(Self).IsFloat();
end;

(*
  test if a string only contains letters a-zA-Z
*)
function AnsiString.IsAlpha(): Boolean; constref;
var 
  ptr: PChar; 
  hiptr:PtrUInt;
begin
  if Length(Self) = 0 then Exit(False);
  ptr := PChar(Self);
  hiptr := PtrUInt(PtrUInt(ptr) + Length(self));
  while PtrUInt(ptr) < hiptr do
    if not (ptr^ in ['A'..'Z', 'a'..'z']) then
      Exit(False)
    else
      Inc(ptr);
  Result := True;
end;

function Char.IsAlpha(): Boolean;
begin
  Result := (Self in ['A'..'Z', 'a'..'z']);
end;

(*
  Extract all the numbers found in the string.
*)
function AnsiString.ExtractNumbers(): TExtendedArray; constref;
var
  i,c,l:Int32;
  Tmp: TStringArray;
begin
  L := Length(Self);
  for i:=1 to Length(Self) do
  begin
    if Self[i].IsDigit() then
    begin
      Tmp += Self[i];
      while (Inc(i) <= L) and (Self[i].IsDigit()) do Tmp[c] += Self[i];
      if (i <= L) and (Self[i] = '.') then
      begin
        Tmp[c] += Self[i];
        while (Inc(i) <= L) and (Self[i].IsDigit()) do Tmp[c] += Self[i];
      end;
      if (i > L) then Break;
      Inc(c);
    end;
  end;

  SetLength(Result, Length(tmp));
  for i:=0 to High(Tmp) do
    Result[i] := StrToFloat(Tmp[i]);
end;

(*
  Extract all the numbers found in the string.
*)
function AnsiString.ExtractNumbersEx(): TExtendedArray; constref;
var
  i, c: Int32;
begin
  SetLength(Result, 0);
  c := 0;

  for i := 1 to High(Self) do
    if (Self[i] in ['0'..'9']) then
    begin
      SetLength(Result, c + 1);
      Result[c] := StrToInt(Self[i]);
      Inc(c);
    end;
end;

(*
  File extension and name
*)
function AnsiString.FileExt(): String; constref;
begin
  Result := ExtractFileExt(Self);
  Delete(Result,1,1);
end;

function AnsiString.FileName(): String; constref;
begin
  if Length(Self) <> 0 then
    Result := Self.Explode('.')[0];
end;

//---| operator overloads bellow this |---------------------------------------\\

operator * (left:AnsiString; Right:Int32): String;
var
  i,H: Int32;
begin
  if Length(left) = 0 then 
    Exit('');
  Result := left;
  H := Length(left);
  SetLength(Result, H*Right);
  for i:=1 to Right-1 do
    MemMove(left[1], Result[1+H*i], H);
end;

operator * (left:Char; Right:Int32): String;
begin
  Result := String(Left) * Right;
end;

operator in (left:Char; Right:String): Boolean;
begin
  Result := System.Pos(left, Right) > 0;
end;

operator in (left:String; Right:String): Boolean;
begin
  Result := System.Pos(left, Right) > 0;
end;
