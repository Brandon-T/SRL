function Box(x1,y1,x2,y2: Int32): TBox;
begin
  Result := [x1,y1,x2,y2];
end;

function GridBox(Slot, Columns, Rows, w, h, diffX, diffY: Integer; Start: TPoint): TBox;
begin
  if (Slot > (Columns * Rows)) then
    Exit;

  Result.X1 := (Start.x + ((Slot mod Columns) * diffX) - (w div 2));
  Result.Y1 := (Start.y + ((Slot div Columns) * diffY) - (h div 2));
  Result.X2 := (Result.X1 + w);
  Result.Y2 := (Result.Y1 + h);
end;

function Grid(Columns, Rows, w, h, diffX, diffY: integer; Start: TPoint): TBoxArray;
var
  i: Integer;
begin
  SetLength(Result, (Columns * Rows));

  for i := 0 to High(Result) do
    Result[i] := GridBox(i, Columns, Rows, w, h, diffX, diffY, Start);
end;

procedure TBox.GetDimensions(out w, h: integer); constref;
begin
  w := Self.X2 - Self.X1 + 1;
  h := Self.Y2 - Self.Y1 + 1;
end;

function TBox.Width(): UInt32; constref;
begin
  Result := Self.X2 - Self.X1 + 1;
end;

function TBox.Height(): UInt32; constref;
begin
  Result := Self.Y2 - Self.Y1 + 1;
end;

function TBox.Area(): UInt32; constref;
begin
  Result := (Self.X2 - Self.X1 + 1) * (Self.Y2 - Self.Y1 + 1);
end;

function TBox.Middle(): TPoint; constref;
begin
  Result := Point((Self.X2 + Self.X1) div 2, (Self.Y2 + Self.Y1) div 2);
end;

procedure TBox.Expand(SizeMod: Int32);
begin
  Self.X1 -= SizeMod;
  Self.Y1 -= SizeMod;
  Self.X2 += SizeMod;
  Self.Y2 += SizeMod;
end;

procedure TBox.Expand(WidMod,HeiMod: Int32); overload;
begin
  Self.X1 -= WidMod;
  Self.Y1 -= HeiMod;
  Self.X2 += WidMod;
  Self.Y2 += HeiMod;
end;

procedure TBox.Expand(SizeMod: Int32; MaxBounds: TBox); overload;
begin
  Self.X1 -= SizeMod;
  Self.Y1 -= SizeMod;
  Self.X2 += SizeMod;
  Self.Y2 += SizeMod;

  Self.LimitTo(MaxBounds);
end;

function TBox.Combine(b: TBox): TBox; constref;
begin
  Result.X1 := Min(Min(Self.X1, b.X2), Min(b.X1, Self.X2));
  Result.Y1 := Min(Min(Self.Y1, b.Y2), Min(b.Y1, Self.Y2));
  Result.X2 := Max(Max(Self.X1, b.X2), Max(b.X1, Self.X2));
  Result.Y2 := Max(Max(Self.Y1, b.Y2), Max(b.Y1, Self.Y2));
end;

function TBox.Overlap(b: TBox): Boolean; constref;
begin
  Result := (Self.X1 <= b.X2) and (Self.X2 >= b.X1) and 
            (Self.Y1 <= b.Y2) and (Self.Y2 >= b.Y1);
end;

function TBox.Contains(other: TBox): Boolean; constref;
begin
  Result := InRange(other.x1, self.x1,self.x2) and
            InRange(other.x2, self.x1,self.x2) and
            InRange(other.y1, self.y1,self.y2) and
            InRange(other.y2, self.y1,self.y2);
end; 

procedure TBox.Offset(pt:TPoint);
begin
  self.x1 += pt.x;
  self.y1 += pt.y;
  self.x2 += pt.x;
  self.y2 += pt.y;
end;

function TBox.OffsetEx(pt:TPoint): TBox; constref;
begin
  Result    := self;
  Result.x1 += pt.x;
  Result.y1 += pt.y;
  Result.x2 += pt.x;
  Result.y2 += pt.y;
end;

procedure TBox.Normalize();
begin
  if (Self.X1 > Self.X2) then
    Swap(Self.X1, Self.X2);
  if (Self.Y1 > Self.Y2) then
    Swap(Self.Y1, Self.Y2);
end;

procedure TBox.LimitTo(b: TBox);
begin
  Self.Normalize();
  b.Normalize();

  if (self.x1 < b.x1) then self.x1 := b.x1;
  if (self.x1 > b.x2) then self.x1 := b.x2;
  if (self.x2 < b.x1) then self.x2 := b.x1;
  if (self.x2 > b.x2) then self.x2 := b.x2;

  if (self.y1 < b.y1) then self.y1 := b.y1;
  if (self.y1 > b.y2) then self.y1 := b.y2;
  if (self.y2 < b.y1) then self.y2 := b.y1;
  if (self.y2 > b.y2) then self.y2 := b.y2;
end;

function TBox.Partition(Rows, Cols: Int32; SizeMod:Int32=0): TBoxArray; constref;
var
  idx,x,y: Int32;
  BoxW,BoxH: Single;
begin
  SetLength(Result, Cols * Rows);
  BoxW := (Self.x2 - Self.x1 + 1) / Cols;
  BoxH := (Self.y2 - Self.y1 + 1) / Rows;
  for y:=0 to Rows-1 do
    for x:=0 to Cols-1 do
    begin
      idx := (Y * Cols) + X;
      Result[idx].x1 := Ceil(Self.x1 + (BoxW * x));
      Result[idx].y1 := Ceil(Self.y1 + (BoxH * y));
      Result[idx].x2 := Trunc(Self.x1 + (BoxW * x) + BoxW-1);
      Result[idx].y2 := Trunc(Self.y1 + (BoxH * y) + BoxH-1);
      Result[idx].Expand(SizeMod);
    end;
end;

function TBox.PartitionEx(Rows, Cols: Int32; WidMod, HeiMod:Int32): TBoxArray; constref;
var
  idx,x,y: Int32;
  BoxW,BoxH: Single;
begin
  SetLength(Result, Cols * Rows);
  BoxW := (Self.x2 - Self.x1 + 1) / Cols;
  BoxH := (Self.y2 - Self.y1 + 1) / Rows;
  for y:=0 to Rows-1 do
    for x:=0 to Cols-1 do
    begin
      idx := (Y * Cols) + X;
      Result[idx].x1 := Ceil(Self.x1 + (BoxW * x));
      Result[idx].y1 := Ceil(Self.y1 + (BoxH * y));
      Result[idx].x2 := Trunc(Self.x1 + (BoxW * x) + BoxW-1);
      Result[idx].y2 := Trunc(Self.y1 + (BoxH * y) + BoxH-1);
      Result[idx].Expand(widMod, heiMod);
    end;
end;

function TBox.EqualDimensions(const Other: TBox): Boolean; constref;
begin
  Result := ((Self.X2 - Self.X1) = (Other.X2 - Other.X1)) and
            ((Self.Y2 - Self.Y1) = (Other.Y2 - Other.Y1));
end;

function TBox.Equals(const Other: TBox): Boolean; constref;
begin
  Result := (Self.X1 = Other.X1) and (Self.X2 = Other.X2) and
            (Self.Y1 = Other.Y1) and (Self.Y2 = Other.Y2);
end;

function TBox.InnerBorder(Size: Integer): TBoxArray; constref;
begin
  SetLength(Result, 4);
  Result[0] := [Self.X1, Self.Y1, Self.X2, Self.Y1 + Size];
  Result[1] := [Self.X1, Self.Y2 - Size, Self.X2, Self.Y2];
  Result[2] := [Self.X1, Result[0].Y2 + 1, Self.X1 + Size, Result[1].Y1 - 1];
  Result[3] := [Self.X2 - Size, Result[0].Y2 + 1, Self.X2, Result[1].Y1 - 1];
end;
