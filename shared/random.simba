type
  EWaitDir = (wdLeft,wdMean,wdRight);

//none-zero random
function nzRandom(): Double; 
begin 
  Result := Max(Random(), 1.0e-299); 
end;
  
(*
srl.GaussRand
~~~~~
.. code-block:: pascal

  function TSRL.GaussRand(mean, dev: Double): Double;

Generates a random gaussian/normal number.
*)
function TSRL.GaussRand(mean, dev: Double): Double; static;
var 
  len: Double;
begin
  len := dev * Sqrt(-2 * Ln(nzRandom()));
  Result := mean + len * Cos(2 * PI * Random());
end;


(*
srl.TruncatedGauss
~~~~~
.. code-block:: pascal

  function TSRL.TruncatedGauss(left:Double=0; right:Double=1): Double;

Generates a random gaussian/normal number which is truncated and mapped within then 
given range ``[left..right]`` weighted towards ``left``
*)
function TSRL.TruncatedGauss(left:Double=0; right:Double=1; CUTOFF:Single=5.5): Double; static;
begin
  Result := CUTOFF+1;
  while Result >= CUTOFF do
    Result := Abs(Sqrt(-2 * Ln(nzRandom())) * Cos(2 * PI * Random()));
  Result := Result / CUTOFF * (right-left) + left;
end;


(*
srl.SkewedRand
~~~~~
.. code-block:: pascal

  function TSRL.SkewedRand(Mode, Lo, Hi: Double): Double; static;

Random skewed distribution generation. `Mode` is a number between `Lo` and `Hi` which is 
where the most of the generated numbers will land.
*)
function TSRL.SkewedRand(Mode, Lo, Hi: Double; CUTOFF:Single=5.5): Double; static;
var top: Double;
begin
  top := Lo;
  if Random()*(Hi-Lo) > Mode-Lo then top := Hi;
  Result := CUTOFF+1;
  while Result >= CUTOFF do
    Result := Abs(Sqrt(-2 * Ln(nzRandom())) * Cos(2 * PI * Random()));
  Result := Result / CUTOFF * (top-Mode) + Mode;
end;


(*
srl.NormalRange
~~~~~
.. code-block:: pascal

  function TSRL.NormalRange(min, max: Integer): Integer;

Generates a random integer in the given range, weighted towards the mean.
*)
function TSRL.NormalRange(min, max:Int32; CUTOFF:Single=5.5): Integer; constref;
begin
  case Random(0,1) of
    0: Result := Round((max+min)/2.0 + TruncatedGauss(0, (max-min)/2, CUTOFF));
    1: Result := Round((max+min)/2.0 - TruncatedGauss(0, (max-min)/2, CUTOFF));
  end;
end;


(*
srl.NormalRange
~~~~~
.. code-block:: pascal

  function TSRL.NormalRange(min, max: Double): Double;

Generates a random float in the given range, weighted towards the mean.
*)
function TSRL.NormalRange(min, max: Double; CUTOFF:Single=5.5): Double; constref; overload;
begin
  case Random(0,1) of
    0: Result := (max+min)/2.0 + TruncatedGauss(0, (max-min)/2, CUTOFF);
    1: Result := (max+min)/2.0 - TruncatedGauss(0, (max-min)/2, CUTOFF);
  end;
end;


(*
srl.RandomPoint
~~~~~
.. code-block:: pascal

  function TSRL.RandomPoint(mean: TPoint; maxRad: Int32): TPoint;

Generates a random TPoint which weights around ``mean``, with a max distance 
from mean defined by ``maxRad``.
*)
function TSRL.RandomPoint(mean:TPoint; maxRad:Int32): TPoint; constref;
begin
  Result.X := NormalRange(mean.x-maxRad, mean.x+maxRad);
  Result.Y := NormalRange(mean.y-maxRad, mean.y+maxRad);
end;


(*
srl.RandomPoint (overload)
~~~~~
.. code-block:: pascal

  function TSRL.RandomPoint(bounds:TBox): TPoint; overload;

Generates a random TPoint in the bounds of the given box `bounds`, 
the point weights towards the middle of the box.
*)
function TSRL.RandomPoint(bounds:TBox): TPoint; constref; overload;
begin
  Result.X := NormalRange(bounds.x1, bounds.x2);
  Result.Y := NormalRange(bounds.y1, bounds.y2);
end;


(*
srl.RandonPointEx
~~~~~
.. code-block:: pascal

  function TSRL.RandonPointEx(From:TPoint; B: TBox; Force:Double=0.35): TPoint; constref;

Generates a random point within the bounds of the given box `B`, the point generated is skewed towards towards the `From`-point.
The last parameter `Force` defines how much the generated point is to be skewed towards or away from `From` - Expects value in the range 0..2

  Force = 0: Result weighs heavily towrads the edge closest to `From`
  Force = 1: Result in the middle of box is most common
  Force = 2: Result weighs heavily towrads the edge furthest away from `From`
*)
function TSRL.RandomPointEx(From:TPoint; B: TBox; Force:Double=0.35): TPoint; constref;
var
  p,c: TPoint;
  x,r: Double;
begin
  p := From;
  if p.x < B.x1 then p.x := B.x1 else if p.x > B.x2 then p.x := B.x2;
  if p.y < B.y1 then p.y := B.y1 else if p.y > B.y2 then p.y := B.y2;
  c :=  Point((B.X2 + B.X1) div 2, (B.Y2 + B.Y1) div 2);
  r := Hypot(p.x-c.x, p.y-c.y) * Force;
  x := ArcTan2(c.y-p.y, c.x-p.x);
  p.x += Round(Cos(x) * r);
  p.y += Round(Sin(x) * r);
  Result.x := Round(SkewedRand(p.x, B.x1, B.x2, 4.1));
  Result.y := Round(SkewedRand(p.y, B.y1, B.y2, 4.1));
end;


(*
srl.NormalWait (overload)
~~~~~
.. code-block:: pascal

  function TSRL.NormalWait(min, max:UInt32; weight:EWaitDir=wdMean): TPoint; overload;

Waits ... Weighted towards the mean of `min` and `max`
*)
procedure TSRL.NormalWait(min, max:UInt32; weight:EWaitDir=wdMean); constref;
begin
  case weight of
    wdLeft:  Wait(Round(TruncatedGauss(min, max)));
    wdMean:  Wait(NormalRange(min, max));
    wdRight: Wait(Round(TruncatedGauss(max, min)));
  end;
end;
