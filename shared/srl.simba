type
  ESRLOption = (srlDebug, srlDebugTimeStamp);
  ESRLOptions = set of ESRLOption;
  EDebugType = (dtHeader, dtFooter, dtFatal, dtNone);

type
  TSRL = record
    _DebugLevel: Integer;

    StartTime: UInt64;
    DefaultClientBounds: TBox;

    Debugging: Boolean;
    DebugTimeStamp: Boolean;

    OnLoginPlayer: procedure();
    OnLoginResponse: function(Response: String): Boolean;

    CloseInterfacesWithEscape: Boolean;
 end;

var
  srl: TSRL;

procedure TSRL.WriteLn(Str: String; const debugType: EDebugType);

  function TimeRunning(ms: UInt64): String;
  var
    _, hour, minute, second: Integer;
  begin
    ConvertTime64(ms, _, _, _, _, hour, minute, second);
    Result := Format('[%.2d:%.2d:%.2d]', [hour,minute,second]);
  end;

var s, Typ: String;
begin
  if (not Debugging) then
    Exit;

  if (Length(Str) > 0) then
  begin
    if (DebugTimeStamp) then
      s := TimeRunning(Self.StartTime);

    if (debugType = dtFatal) then
      Typ := ' [FATAL]:';

    if (debugType = dtFooter) and (_DebugLevel > 0) then
      Dec(_DebugLevel);

    s += StringOfChar('-', _DebugLevel * 2) + Typ + ' ';

    if (debugType = dtHeader) then
      Inc(_DebugLevel);

    _Write(s + Str);
  end;

  _WriteLn();

  if (debugType = dtFatal) then
    TerminateScript;
end;

procedure TSRL.WriteLn(Str: String); overload;
begin
  Self.WriteLn(Str, dtNone);
end;

function TSRL.WriteLn(Str: String; AResult: Variant; Footer: String = ''): Variant; overload;
begin
  Result := AResult;
  Self.WriteLn(Str);
  if (Footer <> '') then
    Self.WriteLn(Footer, dtFooter);
end;

procedure TSRL.WriteFmt(Str: String; Args: TVariantArray; debugType: EDebugType = dtNone);
begin
  Self.WriteLn(Format(Str, Args), debugType);
end;

procedure TSRL.ToggleCloseInterfacesWithEscape(Enable: Boolean);
begin
  Self.CloseInterfacesWithEscape := Enable;
end;

procedure TSRL.Setup(Options: ESRLOptions = [srlDebug]);
begin
  _DebugLevel := 1;
  DebugTimeStamp := False;
  Debugging := False;

  StartTime := GetTickCount64;

  if (srlDebugTimeStamp in Options) then
    DebugTimeStamp := True;
  if (srlDebug in Options) then
    Debugging := True;
end;



