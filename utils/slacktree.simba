{$loadlib ../Includes/SRL/utils/slacktree/slacktree}

// my answers to FilterTPADistTPA found in AND_TPA.pas
// solves the problem in roughly O(n log n) time

(*
 Returns all the points from `self` that are within range of any point in `other`.
 The parameters `mindist` and `maxdist` determine what "within range" means.
*)
function TPointArray.PointsInRangeOf(Other: TPointArray; MinDist, MaxDist: Double): TPointArray; constref;
var
  tree:TSlackTree;
  pt:TPoint;
begin
  tree.Init(Copy(self));
  for pt in Other do
    Result += tree.RangeQueryEx(pt, minDist,minDist, maxDist,maxDist, True);
end;

(*
 same as the above but lets you specify X- and Y-wise distance separately. This allows
 for a lot of cool stuff :p
*)
function TPointArray.PointsInRangeOf(Other: TPointArray; minDx, minDy, maxDx, maxDy: Int32): TPointArray; constref; overload;
var
  tree:TSlackTree;
  pt:TPoint;
begin
  tree.Init(Copy(self));
  for pt in Other do
    Result += tree.RangeQueryEx(pt, minDx, minDy, maxDx, maxDy, True);
end;


(*
 An older version with some other parameters from what the above takes.
 I'll just drop it here.
*)
type EOverlap = (eoLeft,eoRight,eoBoth);

function TPAOverlap(TPA1,TPA2:TPointArray; r:Int32; overlap:EOverlap=eoBoth): TPointArray;
var
  tree:TSlackTree;
  pt:TPoint;
begin
  if overlap = eoRight then Swap(TPA1, TPA2);

  tree.Init(TPA1);
  for pt in TPA2 do
    Result += tree.RangeQueryEx(pt, r,r, True);
  tree.Free();

  if overlap=eoBoth then
  begin
    tree.Init(TPA2);
    for pt in TPA1 do
      Result += tree.RangeQueryEx(pt, r,r, True);
    tree.Free();
  end;
end;
